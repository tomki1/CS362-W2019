---------------------------------------------------
Assignment 3 Unit Test Results---------------------------------------------------
-------------------
unittest1
File 'dominion.c'
Lines executed:1.79% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:	  return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
    #####:  667: int adventurerFunction() {
        -:  668:
    #####:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
    #####:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
    #####:  673:		  drawCard(currentPlayer, state);
    #####:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  676:			  drawntreasure++;
        -:  677:		  else {
    #####:  678:			  temphand[z] = cardDrawn;
    #####:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
    #####:  683:	  while (z - 1 >= 0) {
    #####:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  685:		  z = z - 1;
        -:  686:	  }
    #####:  687:	  return 0;
        -:  688:  }
        -:  689:
    #####:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
    #####:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
    #####:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
    #####:  698:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
    #####:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
    #####:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
    #####:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
    #####:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
    #####:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
    #####:  745:		 if (i != currentPlayer)
        -:  746:		 {
    #####:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
    #####:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
    #####:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
    #####:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
    #####:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
    #####:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
    #####:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
    #####:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
    #####:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
    #####: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
    #####: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
    #####: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
    #####: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
    #####: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
    #####: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
    #####: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
    #####: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return 0;
        -: 1287:}
        -: 1288:
    #####: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
    #####: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
    #####: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
    #####: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
    #####: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
    #####: 1323:  return 0;
        -: 1324:}
        -: 1325:
    #####: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
    #####: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
    #####: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
    #####: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
    #####: 1338:	  state->coins += 1;
        -: 1339:	}
    #####: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
        -: 1343:	}
    #####: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
    #####: 1351:  state->coins += bonus;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
unittest2
File 'dominion.c'
Lines executed:6.81% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
       94:  583:int getCost(int cardNumber)
        -:  584:{
       94:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
    #####:  667: int adventurerFunction() {
        -:  668:
    #####:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
    #####:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
    #####:  673:		  drawCard(currentPlayer, state);
    #####:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  676:			  drawntreasure++;
        -:  677:		  else {
    #####:  678:			  temphand[z] = cardDrawn;
    #####:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
    #####:  683:	  while (z - 1 >= 0) {
    #####:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  685:		  z = z - 1;
        -:  686:	  }
    #####:  687:	  return 0;
        -:  688:  }
        -:  689:
    #####:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
    #####:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
    #####:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
    #####:  698:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
    #####:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
    #####:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
    #####:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
    #####:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
    #####:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
    #####:  745:		 if (i != currentPlayer)
        -:  746:		 {
    #####:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
    #####:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
    #####:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
    #####:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
    #####:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
    #####:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
    #####:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
    #####:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
    #####:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
    #####: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
    #####: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
    #####: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
    #####: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
    #####: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
    #####: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
    #####: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
    #####: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return 0;
        -: 1287:}
        -: 1288:
    #####: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
    #####: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
    #####: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
    #####: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
    #####: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
    #####: 1323:  return 0;
        -: 1324:}
        -: 1325:
    #####: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
    #####: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
    #####: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
    #####: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
    #####: 1338:	  state->coins += 1;
        -: 1339:	}
    #####: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
        -: 1343:	}
    #####: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
    #####: 1351:  state->coins += bonus;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
unittest3
File 'dominion.c'
Lines executed:7.17% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    #####:    8:int compare(const void* a, const void* b) {
    #####:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
    #####:   11:  if (*(int*)a < *(int*)b)
    #####:   12:    return -1;
    #####:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
    #####:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    #####:   44:  SelectStream(1);
    #####:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
    #####:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    #####:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    #####:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
    #####:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
    #####:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    #####:   73:  if (numPlayers == 2)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    #####:   87:  if (numPlayers == 2)
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    #####:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:  102:  state->supplyCount[silver] = 40;
    #####:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    #####:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
    #####:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
    #####:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    #####:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
    #####:  115:		  if (numPlayers == 2){ 
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    #####:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    #####:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    #####:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    #####:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
    #####:  140:      state->deckCount[i] = 0;
    #####:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
    #####:  143:	  state->deck[i][j] = estate;
    #####:  144:	  state->deckCount[i]++;
        -:  145:	}
    #####:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
    #####:  148:	  state->deck[i][j] = copper;
    #####:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    #####:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
    #####:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    #####:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
    #####:  166:      state->handCount[i] = 0;
    #####:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
    #####:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
    #####:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    #####:  182:  state->outpostPlayed = 0;
    #####:  183:  state->phase = 0;
    #####:  184:  state->numActions = 1;
    #####:  185:  state->numBuys = 1;
    #####:  186:  state->playedCardCount = 0;
    #####:  187:  state->whoseTurn = 0;
    #####:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  192:  for (it = 0; it < 5; it++){
    #####:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
    #####:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
    #####:  198:  return 0;
        -:  199:}
        -:  200:
    #####:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    #####:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    #####:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
    #####:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    #####:  214:  while (state->deckCount[player] > 0) {
    #####:  215:    card = floor(Random() * state->deckCount[player]);
    #####:  216:    newDeck[newDeckPos] = state->deck[player][card];
    #####:  217:    newDeckPos++;
    #####:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
    #####:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    #####:  221:    state->deckCount[player]--;
        -:  222:  }
    #####:  223:  for (i = 0; i < newDeckPos; i++) {
    #####:  224:    state->deck[player][i] = newDeck[i];
    #####:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
    #####:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
    #####:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    #####:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    #####:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    #####:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    #####:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    #####:  576:    state->deckCount[player]--;
    #####:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    #####:  580:  return 0;
        -:  581:}
        -:  582:
       94:  583:int getCost(int cardNumber)
        -:  584:{
       94:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
    #####:  667: int adventurerFunction() {
        -:  668:
    #####:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
    #####:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
    #####:  673:		  drawCard(currentPlayer, state);
    #####:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  676:			  drawntreasure++;
        -:  677:		  else {
    #####:  678:			  temphand[z] = cardDrawn;
    #####:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
    #####:  683:	  while (z - 1 >= 0) {
    #####:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  685:		  z = z - 1;
        -:  686:	  }
    #####:  687:	  return 0;
        -:  688:  }
        -:  689:
    #####:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
    #####:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
    #####:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
    #####:  698:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
    #####:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
    #####:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
    #####:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
    #####:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
    #####:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
    #####:  745:		 if (i != currentPlayer)
        -:  746:		 {
    #####:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
    #####:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
    #####:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
    #####:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
    #####:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
    #####:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
    #####:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
    #####:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
    #####:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
    #####: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
    #####: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
    #####: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
    #####: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
    #####: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
    #####: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
    #####: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
    #####: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return 0;
        -: 1287:}
        -: 1288:
    #####: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
    #####: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
    #####: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
    #####: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
    #####: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
    #####: 1323:  return 0;
        -: 1324:}
        -: 1325:
    #####: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
    #####: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
    #####: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
    #####: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
    #####: 1338:	  state->coins += 1;
        -: 1339:	}
    #####: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
        -: 1343:	}
    #####: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
    #####: 1351:  state->coins += bonus;
        -: 1352:
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
unittest4
File 'dominion.c'
Lines executed:24.37% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      135:    8:int compare(const void* a, const void* b) {
      135:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      135:   11:  if (*(int*)a < *(int*)b)
       36:   12:    return -1;
       99:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        3:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        3:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       33:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      330:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
        1:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
        1:   89:      state->supplyCount[estate] = 8;
        1:   90:      state->supplyCount[duchy] = 8;
        1:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
       63:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      495:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       30:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        6:  115:		  if (numPlayers == 2){ 
        1:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       27:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       12:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        9:  140:      state->deckCount[i] = 0;
       36:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       27:  143:	  state->deck[i][j] = estate;
       27:  144:	  state->deckCount[i]++;
        -:  145:	}
       72:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       63:  148:	  state->deck[i][j] = copper;
       63:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       12:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        9:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       12:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
        9:  166:      state->handCount[i] = 0;
        9:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
       84:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       18:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        -:  199:}
        -:  200:
        9:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
        9:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
        9:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
        9:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      108:  214:  while (state->deckCount[player] > 0) {
       90:  215:    card = floor(Random() * state->deckCount[player]);
       90:  216:    newDeck[newDeckPos] = state->deck[player][card];
       90:  217:    newDeckPos++;
      314:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      224:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
       90:  221:    state->deckCount[player]--;
        -:  222:  }
       99:  223:  for (i = 0; i < newDeckPos; i++) {
       90:  224:    state->deck[player][i] = newDeck[i];
       90:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
        9:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       15:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       15:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       15:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       15:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       15:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       15:  576:    state->deckCount[player]--;
       15:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       15:  580:  return 0;
        -:  581:}
        -:  582:
       94:  583:int getCost(int cardNumber)
        -:  584:{
       94:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
    #####:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
    #####:  655:  int currentPlayer = whoseTurn(state);
    #####:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
    #####:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
    #####:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
    #####:  662:  int z = 0;// this is the counter for the temp hand
    #####:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
    #####:  667: int adventurerFunction() {
        -:  668:
    #####:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
    #####:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
    #####:  673:		  drawCard(currentPlayer, state);
    #####:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  676:			  drawntreasure++;
        -:  677:		  else {
    #####:  678:			  temphand[z] = cardDrawn;
    #####:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
    #####:  683:	  while (z - 1 >= 0) {
    #####:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  685:		  z = z - 1;
        -:  686:	  }
    #####:  687:	  return 0;
        -:  688:  }
        -:  689:
    #####:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
    #####:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
    #####:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
    #####:  698:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
    #####:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
    #####:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
    #####:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
    #####:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
    #####:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
    #####:  745:		 if (i != currentPlayer)
        -:  746:		 {
    #####:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
    #####:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
    #####:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
    #####:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
    #####:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
    #####:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
    #####:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
    #####:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
    #####:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
    #####:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
    #####:  897:      discardCard(handPos, currentPlayer, state, 0);
    #####:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
    #####: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
    #####: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
    #####: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
    #####: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
    #####: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
    #####: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
    #####: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
    #####: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
    #####: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
    #####: 1286:  return 0;
        -: 1287:}
        -: 1288:
    #####: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
    #####: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
    #####: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
    #####: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
    #####: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
    #####: 1323:  return 0;
        -: 1324:}
        -: 1325:
        3: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
        3: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
       18: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
       15: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
       12: 1338:	  state->coins += 1;
        -: 1339:	}
        3: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
        -: 1343:	}
        3: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
        3: 1351:  state->coins += bonus;
        -: 1352:
        3: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
cardtest1
File 'dominion.c'
Lines executed:29.57% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      195:    8:int compare(const void* a, const void* b) {
      195:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      195:   11:  if (*(int*)a < *(int*)b)
       52:   12:    return -1;
      143:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        5:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        5:   44:  SelectStream(1);
        5:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        5:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        5:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       55:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      550:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      500:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        5:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        5:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        5:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        5:  102:  state->supplyCount[silver] = 40;
        5:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      105:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      825:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      775:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       50:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       10:  115:		  if (numPlayers == 2){ 
        3:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       45:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       50:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      725:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       13:  140:      state->deckCount[i] = 0;
       52:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       39:  143:	  state->deck[i][j] = estate;
       39:  144:	  state->deckCount[i]++;
        -:  145:	}
      104:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       91:  148:	  state->deck[i][j] = copper;
       91:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       13:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       13:  166:      state->handCount[i] = 0;
       13:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      140:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      135:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        5:  182:  state->outpostPlayed = 0;
        5:  183:  state->phase = 0;
        5:  184:  state->numActions = 1;
        5:  185:  state->numBuys = 1;
        5:  186:  state->playedCardCount = 0;
        5:  187:  state->whoseTurn = 0;
        5:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       30:  192:  for (it = 0; it < 5; it++){
       25:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        5:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        5:  198:  return 0;
        -:  199:}
        -:  200:
       13:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       13:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       13:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       13:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      156:  214:  while (state->deckCount[player] > 0) {
      130:  215:    card = floor(Random() * state->deckCount[player]);
      130:  216:    newDeck[newDeckPos] = state->deck[player][card];
      130:  217:    newDeckPos++;
      454:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      324:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      130:  221:    state->deckCount[player]--;
        -:  222:  }
      143:  223:  for (i = 0; i < newDeckPos; i++) {
      130:  224:    state->deck[player][i] = newDeck[i];
      130:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       13:  228:  return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       22:  346:int whoseTurn(struct gameState *state) {
       22:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
       31:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       31:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       31:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       31:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       31:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       31:  576:    state->deckCount[player]--;
       31:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       31:  580:  return 0;
        -:  581:}
        -:  582:
       94:  583:int getCost(int cardNumber)
        -:  584:{
       94:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
        2:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        2:  655:  int currentPlayer = whoseTurn(state);
        2:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        2:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        2:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        2:  662:  int z = 0;// this is the counter for the temp hand
        2:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
    #####:  667: int adventurerFunction() {
        -:  668:
    #####:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
    #####:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
    #####:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
    #####:  673:		  drawCard(currentPlayer, state);
    #####:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  676:			  drawntreasure++;
        -:  677:		  else {
    #####:  678:			  temphand[z] = cardDrawn;
    #####:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
    #####:  683:	  while (z - 1 >= 0) {
    #####:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  685:		  z = z - 1;
        -:  686:	  }
    #####:  687:	  return 0;
        -:  688:  }
        -:  689:
        2:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
        6:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
        4:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
        2:  698:	 discardCard(handPos, currentPlayer, state, 0);
        2:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
    #####:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
    #####:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
    #####:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
    #####:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
    #####:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
    #####:  745:		 if (i != currentPlayer)
        -:  746:		 {
    #####:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
    #####:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
    #####:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
        2:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
    #####:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
    #####:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
    #####:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
    #####:  779:      updateCoins(currentPlayer, state, 5);
    #####:  780:      x = 1;//Condition to loop on
    #####:  781:      while( x == 1) {//Buy one card
    #####:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
    #####:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
    #####:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
    #####:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  815:	state->hand[currentPlayer][i] = temphand[i];
    #####:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
    #####:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
        2:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
        2:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
        2:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
        2:  897:      discardCard(handPos, currentPlayer, state, 0);
        2:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
        4: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
        4: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
        4: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
        4: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
        4: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
        4: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
        4: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
        4: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
        4: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
        4: 1286:  return 0;
        -: 1287:}
        -: 1288:
    #####: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
    #####: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
    #####: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
    #####: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
    #####: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
    #####: 1323:  return 0;
        -: 1324:}
        -: 1325:
        5: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
        5: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
       30: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
       25: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
       20: 1338:	  state->coins += 1;
        -: 1339:	}
        5: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
    #####: 1342:	  state->coins += 2;
        -: 1343:	}
        5: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
        5: 1351:  state->coins += bonus;
        -: 1352:
        5: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
cardtest2
File 'dominion.c'
Lines executed:44.27% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      419:    8:int compare(const void* a, const void* b) {
      419:    9:  if (*(int*)a > *(int*)b)
       20:   10:    return 1;
      399:   11:  if (*(int*)a < *(int*)b)
      113:   12:    return -1;
      286:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       11:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       11:   44:  SelectStream(1);
       11:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       11:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       11:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      121:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     1210:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     1100:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       11:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       11:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       11:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       11:  102:  state->supplyCount[silver] = 40;
       11:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      231:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     1815:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     1705:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      110:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       22:  115:		  if (numPlayers == 2){ 
        9:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       99:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      110:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1595:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       36:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       25:  140:      state->deckCount[i] = 0;
      100:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       75:  143:	  state->deck[i][j] = estate;
       75:  144:	  state->deckCount[i]++;
        -:  145:	}
      200:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      175:  148:	  state->deck[i][j] = copper;
      175:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       36:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       25:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       36:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       25:  166:      state->handCount[i] = 0;
       25:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      308:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      297:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       11:  182:  state->outpostPlayed = 0;
       11:  183:  state->phase = 0;
       11:  184:  state->numActions = 1;
       11:  185:  state->numBuys = 1;
       11:  186:  state->playedCardCount = 0;
       11:  187:  state->whoseTurn = 0;
       11:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       66:  192:  for (it = 0; it < 5; it++){
       55:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       11:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       11:  198:  return 0;
        -:  199:}
        -:  200:
       62:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       62:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       62:  209:  if (state->deckCount[player] < 1)
       25:  210:    return -1;
       37:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      362:  214:  while (state->deckCount[player] > 0) {
      288:  215:    card = floor(Random() * state->deckCount[player]);
      288:  216:    newDeck[newDeckPos] = state->deck[player][card];
      288:  217:    newDeckPos++;
      935:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      647:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      288:  221:    state->deckCount[player]--;
        -:  222:  }
      325:  223:  for (i = 0; i < newDeckPos; i++) {
      288:  224:    state->deck[player][i] = newDeck[i];
      288:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       37:  228:  return 0;
        -:  229:}
        -:  230:
        6:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        6:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        6:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        6:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        6:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        6:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       34:  346:int whoseTurn(struct gameState *state) {
       34:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      135:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      135:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       61:  533:    for (i = 0; i < state->discardCount[player];i++){
       38:  534:      state->deck[player][i] = state->discard[player][i];
       38:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       23:  538:    state->deckCount[player] = state->discardCount[player];
       23:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       23:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       23:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       23:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       23:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       23:  559:    if (deckCounter == 0)
       11:  560:      return -1;
        -:  561:
       12:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  563:    state->deckCount[player]--;
       12:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      112:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      112:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      112:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      112:  576:    state->deckCount[player]--;
      112:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      124:  580:  return 0;
        -:  581:}
        -:  582:
      100:  583:int getCost(int cardNumber)
        -:  584:{
      100:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
        6:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
        8:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
        8:  655:  int currentPlayer = whoseTurn(state);
        8:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
        8:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
        8:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
        8:  662:  int z = 0;// this is the counter for the temp hand
        8:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        6:  667: int adventurerFunction() {
        -:  668:
       56:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
       44:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
       14:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
       44:  673:		  drawCard(currentPlayer, state);
       44:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
       44:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  676:			  drawntreasure++;
        -:  677:		  else {
       26:  678:			  temphand[z] = cardDrawn;
       26:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       26:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
       38:  683:	  while (z - 1 >= 0) {
       26:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       26:  685:		  z = z - 1;
        -:  686:	  }
        6:  687:	  return 0;
        -:  688:  }
        -:  689:
        2:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
        6:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
        4:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
        2:  698:	 discardCard(handPos, currentPlayer, state, 0);
        2:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
        6:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
       30:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
       24:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
        6:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
       18:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
       12:  745:		 if (i != currentPlayer)
        -:  746:		 {
        6:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
        6:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        6:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
        8:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
        6:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
        6:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
       67:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       61:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       61:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
        6:  779:      updateCoins(currentPlayer, state, 5);
        6:  780:      x = 1;//Condition to loop on
       18:  781:      while( x == 1) {//Buy one card
        6:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
        6:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
        6:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        6:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
       67:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       61:  815:	state->hand[currentPlayer][i] = temphand[i];
       61:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
        6:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
        2:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
        2:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
        2:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
        2:  897:      discardCard(handPos, currentPlayer, state, 0);
        2:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
       10: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
       10: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
       10: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       10: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
       10: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
       10: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
    #####: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
       10: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
       10: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
       10: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
       10: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
       10: 1286:  return 0;
        -: 1287:}
        -: 1288:
        6: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
        6: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
        6: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
        6: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
        6: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
        6: 1323:  return 0;
        -: 1324:}
        -: 1325:
       23: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
       23: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
      188: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
      165: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
       50: 1338:	  state->coins += 1;
        -: 1339:	}
      115: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
        6: 1342:	  state->coins += 2;
        -: 1343:	}
      109: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
        7: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
       23: 1351:  state->coins += bonus;
        -: 1352:
       23: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
cardtest3
File 'dominion.c'
Lines executed:44.44% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      779:    8:int compare(const void* a, const void* b) {
      779:    9:  if (*(int*)a > *(int*)b)
       20:   10:    return 1;
      759:   11:  if (*(int*)a < *(int*)b)
      209:   12:    return -1;
      550:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       23:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       23:   44:  SelectStream(1);
       23:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       23:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       23:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      253:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2530:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2300:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       23:   73:  if (numPlayers == 2)
        -:   74:    {
       21:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       23:   87:  if (numPlayers == 2)
        -:   88:    {
       21:   89:      state->supplyCount[estate] = 8;
       21:   90:      state->supplyCount[duchy] = 8;
       21:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       23:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       23:  102:  state->supplyCount[silver] = 40;
       23:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      483:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3795:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     3565:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      230:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       46:  115:		  if (numPlayers == 2){ 
       21:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      207:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      230:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3335:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       72:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       49:  140:      state->deckCount[i] = 0;
      196:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      147:  143:	  state->deck[i][j] = estate;
      147:  144:	  state->deckCount[i]++;
        -:  145:	}
      392:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      343:  148:	  state->deck[i][j] = copper;
      343:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       72:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       49:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       72:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       49:  166:      state->handCount[i] = 0;
       49:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      644:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      621:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       23:  182:  state->outpostPlayed = 0;
       23:  183:  state->phase = 0;
       23:  184:  state->numActions = 1;
       23:  185:  state->numBuys = 1;
       23:  186:  state->playedCardCount = 0;
       23:  187:  state->whoseTurn = 0;
       23:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      138:  192:  for (it = 0; it < 5; it++){
      115:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       23:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       23:  198:  return 0;
        -:  199:}
        -:  200:
       86:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       86:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       86:  209:  if (state->deckCount[player] < 1)
       25:  210:    return -1;
       61:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      650:  214:  while (state->deckCount[player] > 0) {
      528:  215:    card = floor(Random() * state->deckCount[player]);
      528:  216:    newDeck[newDeckPos] = state->deck[player][card];
      528:  217:    newDeckPos++;
     1775:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1247:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      528:  221:    state->deckCount[player]--;
        -:  222:  }
      589:  223:  for (i = 0; i < newDeckPos; i++) {
      528:  224:    state->deck[player][i] = newDeck[i];
      528:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       61:  228:  return 0;
        -:  229:}
        -:  230:
        6:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        6:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        6:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        6:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        6:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        6:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       12:  320:int supplyCount(int card, struct gameState *state) {
       12:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       46:  346:int whoseTurn(struct gameState *state) {
       46:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      207:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      207:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       61:  533:    for (i = 0; i < state->discardCount[player];i++){
       38:  534:      state->deck[player][i] = state->discard[player][i];
       38:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       23:  538:    state->deckCount[player] = state->discardCount[player];
       23:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       23:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       23:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       23:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       23:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       23:  559:    if (deckCounter == 0)
       11:  560:      return -1;
        -:  561:
       12:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  563:    state->deckCount[player]--;
       12:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      184:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      184:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      184:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      184:  576:    state->deckCount[player]--;
      184:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      196:  580:  return 0;
        -:  581:}
        -:  582:
      100:  583:int getCost(int cardNumber)
        -:  584:{
      100:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
        6:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
       20:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
       20:  655:  int currentPlayer = whoseTurn(state);
       20:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
       20:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
       20:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
       20:  662:  int z = 0;// this is the counter for the temp hand
       20:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        6:  667: int adventurerFunction() {
        -:  668:
       56:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
       44:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
       14:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
       44:  673:		  drawCard(currentPlayer, state);
       44:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
       44:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  676:			  drawntreasure++;
        -:  677:		  else {
       26:  678:			  temphand[z] = cardDrawn;
       26:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       26:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
       38:  683:	  while (z - 1 >= 0) {
       26:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       26:  685:		  z = z - 1;
        -:  686:	  }
        6:  687:	  return 0;
        -:  688:  }
        -:  689:
        2:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
        6:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
        4:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
        2:  698:	 discardCard(handPos, currentPlayer, state, 0);
        2:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
        6:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
       30:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
       24:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
        6:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
       18:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
       12:  745:		 if (i != currentPlayer)
        -:  746:		 {
        6:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
        6:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
        6:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
       20:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
        6:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
        6:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
       67:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       61:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       61:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
        6:  779:      updateCoins(currentPlayer, state, 5);
        6:  780:      x = 1;//Condition to loop on
       18:  781:      while( x == 1) {//Buy one card
        6:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
        6:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
        6:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
        6:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
       67:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       61:  815:	state->hand[currentPlayer][i] = temphand[i];
       61:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
        6:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
        2:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
       14:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
       14:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
       14:  897:      discardCard(handPos, currentPlayer, state, 0);
       14:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
       22: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
       22: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
       22: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       22: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
       22: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
       22: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
        1: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
       21: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
       21: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
       21: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
       21: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
       22: 1286:  return 0;
        -: 1287:}
        -: 1288:
        6: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
        6: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
        6: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
        6: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
        6: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
        6: 1323:  return 0;
        -: 1324:}
        -: 1325:
       35: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
       35: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
      260: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
      225: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
       98: 1338:	  state->coins += 1;
        -: 1339:	}
      127: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
        6: 1342:	  state->coins += 2;
        -: 1343:	}
      121: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
        7: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
       35: 1351:  state->coins += bonus;
        -: 1352:
       35: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

-------------------
cardtest4
File 'dominion.c'
Lines executed:44.44% of 558
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      899:    8:int compare(const void* a, const void* b) {
      899:    9:  if (*(int*)a > *(int*)b)
       20:   10:    return 1;
      879:   11:  if (*(int*)a < *(int*)b)
      241:   12:    return -1;
      638:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       27:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       27:   44:  SelectStream(1);
       27:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       27:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       27:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      297:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2970:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       27:   73:  if (numPlayers == 2)
        -:   74:    {
       25:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
        2:   77:  else if (numPlayers == 3)
        -:   78:    {
        1:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        1:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       27:   87:  if (numPlayers == 2)
        -:   88:    {
       25:   89:      state->supplyCount[estate] = 8;
       25:   90:      state->supplyCount[duchy] = 8;
       25:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
        2:   95:      state->supplyCount[estate] = 12;
        2:   96:      state->supplyCount[duchy] = 12;
        2:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       27:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       27:  102:  state->supplyCount[silver] = 40;
       27:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      567:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     4455:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     4185:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      270:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       54:  115:		  if (numPlayers == 2){ 
       25:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        2:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      243:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      270:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     3915:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       84:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       57:  140:      state->deckCount[i] = 0;
      228:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      171:  143:	  state->deck[i][j] = estate;
      171:  144:	  state->deckCount[i]++;
        -:  145:	}
      456:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      399:  148:	  state->deck[i][j] = copper;
      399:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       84:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       57:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       84:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       57:  166:      state->handCount[i] = 0;
       57:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      756:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      729:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       27:  182:  state->outpostPlayed = 0;
       27:  183:  state->phase = 0;
       27:  184:  state->numActions = 1;
       27:  185:  state->numBuys = 1;
       27:  186:  state->playedCardCount = 0;
       27:  187:  state->whoseTurn = 0;
       27:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      162:  192:  for (it = 0; it < 5; it++){
      135:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       27:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       27:  198:  return 0;
        -:  199:}
        -:  200:
       94:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       94:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       94:  209:  if (state->deckCount[player] < 1)
       25:  210:    return -1;
       69:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      746:  214:  while (state->deckCount[player] > 0) {
      608:  215:    card = floor(Random() * state->deckCount[player]);
      608:  216:    newDeck[newDeckPos] = state->deck[player][card];
      608:  217:    newDeckPos++;
     2055:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
     1447:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      608:  221:    state->deckCount[player]--;
        -:  222:  }
      677:  223:  for (i = 0; i < newDeckPos; i++) {
      608:  224:    state->deck[player][i] = newDeck[i];
      608:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       69:  228:  return 0;
        -:  229:}
        -:  230:
        6:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        6:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        6:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        6:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        6:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        6:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        6:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        6:  269:  return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       20:  320:int supplyCount(int card, struct gameState *state) {
       20:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
       50:  346:int whoseTurn(struct gameState *state) {
       50:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
       10:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
      247:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      247:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       61:  533:    for (i = 0; i < state->discardCount[player];i++){
       38:  534:      state->deck[player][i] = state->discard[player][i];
       38:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
       23:  538:    state->deckCount[player] = state->discardCount[player];
       23:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
       23:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
       23:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
       23:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
       23:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
       23:  559:    if (deckCounter == 0)
       11:  560:      return -1;
        -:  561:
       12:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       12:  563:    state->deckCount[player]--;
       12:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      224:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      224:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      224:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      224:  576:    state->deckCount[player]--;
      224:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      236:  580:  return 0;
        -:  581:}
        -:  582:
      104:  583:int getCost(int cardNumber)
        -:  584:{
      104:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
        6:  588:      return 0;
        -:  589:    case estate:
        6:  590:      return 2;
        -:  591:    case duchy:
        3:  592:      return 5;
        -:  593:    case province:
        5:  594:      return 8;
        -:  595:    case copper:
        3:  596:      return 0;
        -:  597:    case silver:
        3:  598:      return 3;
        -:  599:    case gold:
        3:  600:      return 6;
        -:  601:    case adventurer:
        5:  602:	  return 6;
        -:  603:    case council_room:
        3:  604:      return 5;
        -:  605:    case feast:
        3:  606:      return 4;
        -:  607:    case gardens:
        3:  608:      return 4;
        -:  609:    case mine:
        5:  610:      return 5;
        -:  611:    case remodel:
        5:  612:      return 4;
        -:  613:    case smithy:
        3:  614:      return 4;
        -:  615:    case village:
        3:  616:      return 3;
        -:  617:    case baron:
        3:  618:      return 4;
        -:  619:    case great_hall:
        3:  620:      return 3;
        -:  621:    case minion:
        3:  622:      return 5;
        -:  623:    case steward:
        3:  624:      return 3;
        -:  625:    case tribute:
        3:  626:      return 5;
        -:  627:    case ambassador:
        5:  628:      return 3;
        -:  629:    case cutpurse:
        3:  630:      return 4;
        -:  631:    case embargo: 
        3:  632:      return 2;
        -:  633:    case outpost:
        3:  634:      return 5;
        -:  635:    case salvager:
        3:  636:      return 4;
        -:  637:    case sea_hag:
        3:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
       10:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        -:  647:
       24:  648:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  649:{
        -:  650:  int i;
        -:  651:  int j;
        -:  652:  int k;
        -:  653:  int x;
        -:  654:  int index;
       24:  655:  int currentPlayer = whoseTurn(state);
       24:  656:  int nextPlayer = currentPlayer + 1;
        -:  657:
       24:  658:  int tributeRevealedCards[2] = {-1, -1};
        -:  659:  int temphand[MAX_HAND];// moved above the if statement
       24:  660:  int drawntreasure=0;
        -:  661:  int cardDrawn;
       24:  662:  int z = 0;// this is the counter for the temp hand
       24:  663:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  664:    nextPlayer = 0;
        -:  665:  }
        -:  666:  
        6:  667: int adventurerFunction() {
        -:  668:
       56:  669:	  while (drawntreasure < 3) { //changed from < 2 to < 3 to introduce bug
       44:  670:		  if (state->deckCount[currentPlayer] < 1) {//if the deck is empty we need to shuffle discard and add to deck
       14:  671:			  shuffle(currentPlayer, state);
        -:  672:		  }
       44:  673:		  drawCard(currentPlayer, state);
       44:  674:		  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
       44:  675:		  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       18:  676:			  drawntreasure++;
        -:  677:		  else {
       26:  678:			  temphand[z] = cardDrawn;
       26:  679:			  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
       26:  680:			  z++;
        -:  681:		  }
        -:  682:	  }
       38:  683:	  while (z - 1 >= 0) {
       26:  684:		  state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
       26:  685:		  z = z - 1;
        -:  686:	  }
        6:  687:	  return 0;
        -:  688:  }
        -:  689:
        2:  690: int smithyFunction() {
        -:  691:	 //changed from +3 Cards to +2 Cards to introduce bug
        6:  692:	 for (i = 0; i < 2; i++)
        -:  693:	 {
        4:  694:		 drawCard(currentPlayer, state);
        -:  695:	 }
        -:  696:
        -:  697:	 //discard card from hand
        2:  698:	 discardCard(handPos, currentPlayer, state, 0);
        2:  699:	 return 0;
        -:  700: }
        -:  701:
    #####:  702: int great_hallFunction() {
        -:  703:	 //+1 Card
    #####:  704:	 drawCard(currentPlayer, state);
        -:  705:
        -:  706:	 //changed from +1 Actions to +2 actions
    #####:  707:	 state->numActions = state->numActions + 2;
        -:  708:
        -:  709:	 //discard card from hand
    #####:  710:	 discardCard(handPos, currentPlayer, state, 0);
    #####:  711:	 return 0;
        -:  712: }
        -:  713:
    #####:  714: int embargoFunction() {
        -:  715:	 //changed from +2 Coins to +0 coins
    #####:  716:	 state->coins = state->coins;
        -:  717:
        -:  718:	 //see if selected pile is in play
    #####:  719:	 if (state->supplyCount[choice1] == -1)
        -:  720:	 {
    #####:  721:		 return -1;
        -:  722:	 }
        -:  723:
        -:  724:	 //add embargo token to selected supply pile
    #####:  725:	 state->embargoTokens[choice1]++;
        -:  726:
        -:  727:	 //trash card
    #####:  728:	 discardCard(handPos, currentPlayer, state, 1);
    #####:  729:	 return 0;
        -:  730: }
        -:  731: 
       10:  732: int council_roomFunction() {
        -:  733:	 //+4 Cards
       50:  734:	 for (i = 0; i < 4; i++)
        -:  735:	 {
       40:  736:		 drawCard(currentPlayer, state);
        -:  737:	 }
        -:  738:
        -:  739:	 //+1 Buy
       10:  740:	 state->numBuys++;
        -:  741:
        -:  742:	 //Each other player draws a card
       30:  743:	 for (i = 0; i < state->numPlayers; i++)
        -:  744:	 {
       20:  745:		 if (i != currentPlayer)
        -:  746:		 {
       10:  747:			 drawCard(i, state);
        -:  748:		 }
        -:  749:	 }
        -:  750:
        -:  751:	 //put played card in played card pile
       10:  752:	 discardCard(handPos, currentPlayer, state, 0);
        -:  753:
       10:  754:	 return 0;
        -:  755: }
        -:  756:
        -:  757: 
        -:  758:	
        -:  759:  //uses switch to select card and perform actions
       24:  760:  switch( card ) 
        -:  761:    {
        -:  762:    case adventurer:
        6:  763:		adventurerFunction();
        -:  764:
        -:  765:			
        -:  766:    case council_room:
       10:  767:	  council_roomFunction();
        -:  768:			
        -:  769:    case feast:
        -:  770:      //gain card with cost up to 5
        -:  771:      //Backup hand
      107:  772:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       97:  773:	temphand[i] = state->hand[currentPlayer][i];//Backup card
       97:  774:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  775:      }
        -:  776:      //Backup hand
        -:  777:
        -:  778:      //Update Coins for Buy
       10:  779:      updateCoins(currentPlayer, state, 5);
       10:  780:      x = 1;//Condition to loop on
       30:  781:      while( x == 1) {//Buy one card
       10:  782:	if (supplyCount(choice1, state) <= 0){
        -:  783:	  if (DEBUG)
        -:  784:	    printf("None of that card left, sorry!\n");
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  788:	  }
        -:  789:	}
       10:  790:	else if (state->coins < getCost(choice1)){
    #####:  791:	  printf("That card is too expensive!\n");
        -:  792:
        -:  793:	  if (DEBUG){
        -:  794:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  795:	  }
        -:  796:	}
        -:  797:	else{
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
       10:  803:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
       10:  804:	  x = 0;//No more buying cards
        -:  805:
        -:  806:	  if (DEBUG){
        -:  807:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  808:	  }
        -:  809:
        -:  810:	}
        -:  811:      }     
        -:  812:
        -:  813:      //Reset Hand
      107:  814:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
       97:  815:	state->hand[currentPlayer][i] = temphand[i];
       97:  816:	temphand[i] = -1;
        -:  817:      }
        -:  818:      //Reset Hand
        -:  819:      			
       10:  820:      return 0;
        -:  821:			
        -:  822:    case gardens:
    #####:  823:      return -1;
        -:  824:			
        -:  825:    case mine:
    #####:  826:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  827:
    #####:  828:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  829:	{
    #####:  830:	  return -1;
        -:  831:	}
        -:  832:		
    #####:  833:      if (choice2 > treasure_map || choice2 < curse)
        -:  834:	{
    #####:  835:	  return -1;
        -:  836:	}
        -:  837:
    #####:  838:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  839:	{
    #####:  840:	  return -1;
        -:  841:	}
        -:  842:
    #####:  843:      gainCard(choice2, state, 2, currentPlayer);
        -:  844:
        -:  845:      //discard card from hand
    #####:  846:      discardCard(handPos, currentPlayer, state, 0);
        -:  847:
        -:  848:      //discard trashed card
    #####:  849:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  850:	{
    #####:  851:	  if (state->hand[currentPlayer][i] == j)
        -:  852:	    {
    #####:  853:	      discardCard(i, currentPlayer, state, 0);			
    #####:  854:	      break;
        -:  855:	    }
        -:  856:	}
        -:  857:			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case remodel:
    #####:  861:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  862:
    #####:  863:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  864:	{
    #####:  865:	  return -1;
        -:  866:	}
        -:  867:
    #####:  868:      gainCard(choice2, state, 0, currentPlayer);
        -:  869:
        -:  870:      //discard card from hand
    #####:  871:      discardCard(handPos, currentPlayer, state, 0);
        -:  872:
        -:  873:      //discard trashed card
    #####:  874:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  875:	{
    #####:  876:	  if (state->hand[currentPlayer][i] == j)
        -:  877:	    {
    #####:  878:	      discardCard(i, currentPlayer, state, 0);			
    #####:  879:	      break;
        -:  880:	    }
        -:  881:	}
        -:  882:
        -:  883:
    #####:  884:      return 0;
        -:  885:		
        -:  886:    case smithy:
        2:  887:	  smithyFunction();
        -:  888:		
        -:  889:    case village:
        -:  890:      //+1 Card
       14:  891:      drawCard(currentPlayer, state);
        -:  892:			
        -:  893:      //+2 Actions
       14:  894:      state->numActions = state->numActions + 2;
        -:  895:			
        -:  896:      //discard played card from hand
       14:  897:      discardCard(handPos, currentPlayer, state, 0);
       14:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
    #####:  952:	  great_hallFunction();
        -:  953:		
        -:  954:    case minion:
        -:  955:      //+1 action
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
        -:  960:			
    #####:  961:      if (choice1)		//+2 coins
        -:  962:	{
    #####:  963:	  state->coins = state->coins + 2;
        -:  964:	}
        -:  965:			
    #####:  966:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  967:	{
        -:  968:	  //discard hand
    #####:  969:	  while(numHandCards(state) > 0)
        -:  970:	    {
    #####:  971:	      discardCard(handPos, currentPlayer, state, 0);
        -:  972:	    }
        -:  973:				
        -:  974:	  //draw 4
    #####:  975:	  for (i = 0; i < 4; i++)
        -:  976:	    {
    #####:  977:	      drawCard(currentPlayer, state);
        -:  978:	    }
        -:  979:				
        -:  980:	  //other players discard hand and redraw if hand size > 4
    #####:  981:	  for (i = 0; i < state->numPlayers; i++)
        -:  982:	    {
    #####:  983:	      if (i != currentPlayer)
        -:  984:		{
    #####:  985:		  if ( state->handCount[i] > 4 )
        -:  986:		    {
        -:  987:		      //discard hand
    #####:  988:		      while( state->handCount[i] > 0 )
        -:  989:			{
    #####:  990:			  discardCard(handPos, i, state, 0);
        -:  991:			}
        -:  992:							
        -:  993:		      //draw 4
    #####:  994:		      for (j = 0; j < 4; j++)
        -:  995:			{
    #####:  996:			  drawCard(i, state);
        -:  997:			}
        -:  998:		    }
        -:  999:		}
        -: 1000:	    }
        -: 1001:				
        -: 1002:	}
    #####: 1003:      return 0;
        -: 1004:		
        -: 1005:    case steward:
    #####: 1006:      if (choice1 == 1)
        -: 1007:	{
        -: 1008:	  //+2 cards
    #####: 1009:	  drawCard(currentPlayer, state);
    #####: 1010:	  drawCard(currentPlayer, state);
        -: 1011:	}
    #####: 1012:      else if (choice1 == 2)
        -: 1013:	{
        -: 1014:	  //+2 coins
    #####: 1015:	  state->coins = state->coins + 2;
        -: 1016:	}
        -: 1017:      else
        -: 1018:	{
        -: 1019:	  //trash 2 cards in hand
    #####: 1020:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1021:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1022:	}
        -: 1023:			
        -: 1024:      //discard card from hand
    #####: 1025:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case tribute:
    #####: 1029:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1030:	if (state->deckCount[nextPlayer] > 0){
    #####: 1031:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1032:	  state->deckCount[nextPlayer]--;
        -: 1033:	}
    #####: 1034:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1035:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1036:	  state->discardCount[nextPlayer]--;
        -: 1037:	}
        -: 1038:	else{
        -: 1039:	  //No Card to Reveal
        -: 1040:	  if (DEBUG){
        -: 1041:	    printf("No cards to reveal\n");
        -: 1042:	  }
        -: 1043:	}
        -: 1044:      }
        -: 1045:	    
        -: 1046:      else{
    #####: 1047:	if (state->deckCount[nextPlayer] == 0){
    #####: 1048:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1049:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1050:	    state->deckCount[nextPlayer]++;
    #####: 1051:	    state->discard[nextPlayer][i] = -1;
    #####: 1052:	    state->discardCount[nextPlayer]--;
        -: 1053:	  }
        -: 1054:			    
    #####: 1055:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1056:	} 
    #####: 1057:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1058:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1059:	state->deckCount[nextPlayer]--;
    #####: 1060:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1061:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1062:	state->deckCount[nextPlayer]--;
        -: 1063:      }    
        -: 1064:		       
    #####: 1065:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1066:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1067:	state->playedCardCount++;
    #####: 1068:	tributeRevealedCards[1] = -1;
        -: 1069:      }
        -: 1070:
    #####: 1071:      for (i = 0; i <= 2; i ++){
    #####: 1072:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1073:	  state->coins += 2;
        -: 1074:	}
        -: 1075:		    
    #####: 1076:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1077:	  drawCard(currentPlayer, state);
    #####: 1078:	  drawCard(currentPlayer, state);
        -: 1079:	}
        -: 1080:	else{//Action Card
    #####: 1081:	  state->numActions = state->numActions + 2;
        -: 1082:	}
        -: 1083:      }
        -: 1084:	    
    #####: 1085:      return 0;
        -: 1086:		
        -: 1087:    case ambassador:
    #####: 1088:      j = 0;		//used to check if player has enough cards to discard
        -: 1089:
    #####: 1090:      if (choice2 > 2 || choice2 < 0)
        -: 1091:	{
    #####: 1092:	  return -1;				
        -: 1093:	}
        -: 1094:
    #####: 1095:      if (choice1 == handPos)
        -: 1096:	{
    #####: 1097:	  return -1;
        -: 1098:	}
        -: 1099:
    #####: 1100:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1101:	{
    #####: 1102:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1103:	    {
    #####: 1104:	      j++;
        -: 1105:	    }
        -: 1106:	}
    #####: 1107:      if (j < choice2)
        -: 1108:	{
    #####: 1109:	  return -1;				
        -: 1110:	}
        -: 1111:
        -: 1112:      if (DEBUG) 
        -: 1113:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1114:
        -: 1115:      //increase supply count for choosen card by amount being discarded
    #####: 1116:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1117:			
        -: 1118:      //each other player gains a copy of revealed card
    #####: 1119:      for (i = 0; i < state->numPlayers; i++)
        -: 1120:	{
    #####: 1121:	  if (i != currentPlayer)
        -: 1122:	    {
    #####: 1123:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1124:	    }
        -: 1125:	}
        -: 1126:
        -: 1127:      //discard played card from hand
    #####: 1128:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1129:
        -: 1130:      //trash copies of cards returned to supply
    #####: 1131:      for (j = 0; j < choice2; j++)
        -: 1132:	{
    #####: 1133:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1134:	    {
    #####: 1135:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1136:		{
    #####: 1137:		  discardCard(i, currentPlayer, state, 1);
    #####: 1138:		  break;
        -: 1139:		}
        -: 1140:	    }
        -: 1141:	}			
        -: 1142:
    #####: 1143:      return 0;
        -: 1144:		
        -: 1145:    case cutpurse:
        -: 1146:
    #####: 1147:      updateCoins(currentPlayer, state, 2);
    #####: 1148:      for (i = 0; i < state->numPlayers; i++)
        -: 1149:	{
    #####: 1150:	  if (i != currentPlayer)
        -: 1151:	    {
    #####: 1152:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1153:		{
    #####: 1154:		  if (state->hand[i][j] == copper)
        -: 1155:		    {
    #####: 1156:		      discardCard(j, i, state, 0);
    #####: 1157:		      break;
        -: 1158:		    }
    #####: 1159:		  if (j == state->handCount[i])
        -: 1160:		    {
    #####: 1161:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1162:			{
        -: 1163:			  if (DEBUG)
        -: 1164:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1165:			}	
    #####: 1166:		      break;
        -: 1167:		    }		
        -: 1168:		}
        -: 1169:					
        -: 1170:	    }
        -: 1171:				
        -: 1172:	}				
        -: 1173:
        -: 1174:      //discard played card from hand
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1176:
    #####: 1177:      return 0;
        -: 1178:
        -: 1179:		
        -: 1180:    case embargo: 
    #####: 1181:	  embargoFunction();
        -: 1182:		
        -: 1183:    case outpost:
        -: 1184:      //set outpost flag
    #####: 1185:      state->outpostPlayed++;
        -: 1186:			
        -: 1187:      //discard card
    #####: 1188:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:      return 0;
        -: 1190:		
        -: 1191:    case salvager:
        -: 1192:      //+1 buy
    #####: 1193:      state->numBuys++;
        -: 1194:			
    #####: 1195:      if (choice1)
        -: 1196:	{
        -: 1197:	  //gain coins equal to trashed card
    #####: 1198:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:	  //trash card
    #####: 1200:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:	}
        -: 1202:			
        -: 1203:      //discard card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:      return 0;
        -: 1206:		
        -: 1207:    case sea_hag:
    #####: 1208:      for (i = 0; i < state->numPlayers; i++){
    #####: 1209:	if (i != currentPlayer){
    #####: 1210:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:	  state->discardCount[i]++;
    #####: 1212:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:	}
        -: 1214:      }
    #####: 1215:      return 0;
        -: 1216:		
        -: 1217:    case treasure_map:
        -: 1218:      //search hand for another treasure_map
    #####: 1219:      index = -1;
    #####: 1220:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:	{
    #####: 1222:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:	    {
    #####: 1224:	      index = i;
    #####: 1225:	      break;
        -: 1226:	    }
        -: 1227:	}
    #####: 1228:      if (index > -1)
        -: 1229:	{
        -: 1230:	  //trash both treasure cards
    #####: 1231:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:	  discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:	  //gain 4 Gold cards
    #####: 1235:	  for (i = 0; i < 4; i++)
        -: 1236:	    {
    #####: 1237:	      gainCard(gold, state, 1, currentPlayer);
        -: 1238:	    }
        -: 1239:				
        -: 1240:	  //return success
    #####: 1241:	  return 1;
        -: 1242:	}
        -: 1243:			
        -: 1244:      //no second treasure_map found in hand
    #####: 1245:      return -1;
        -: 1246:    }
        -: 1247:	
    #####: 1248:  return -1;
        -: 1249:}
        -: 1250:
       26: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
       26: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
       26: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       26: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
       26: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
       26: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
        1: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
       25: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
       25: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
       25: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
       25: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
       26: 1286:  return 0;
        -: 1287:}
        -: 1288:
       10: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
       10: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
       10: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
       10: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
       10: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       10: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
       10: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
       10: 1323:  return 0;
        -: 1324:}
        -: 1325:
       43: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
       43: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
      320: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
      277: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
      114: 1338:	  state->coins += 1;
        -: 1339:	}
      163: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
        6: 1342:	  state->coins += 2;
        -: 1343:	}
      157: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
        7: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
       43: 1351:  state->coins += bonus;
        -: 1352:
       43: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:
        -: 1358:
        -: 1359://end of dominion.c
        -: 1360:

