---------------------------------------------------
Assignment 3 Unit Test Results---------------------------------------------------
-------------------
cardtest1
File 'dominion.c'
Lines executed:26.80% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       60:    8:int compare(const void* a, const void* b) {
       60:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
       60:   11:    if (*(int*)a < *(int*)b)
       16:   12:        return -1;
       44:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        2:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        2:   44:    SelectStream(1);
        2:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        2:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        2:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       22:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      220:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      200:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        2:   73:    if (numPlayers == 2)
        -:   74:    {
        2:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        2:   87:    if (numPlayers == 2)
        -:   88:    {
        2:   89:        state->supplyCount[estate] = 8;
        2:   90:        state->supplyCount[duchy] = 8;
        2:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        2:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  102:    state->supplyCount[silver] = 40;
        2:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
       42:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      330:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      310:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       20:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
        4:  115:                    if (numPlayers == 2){
        2:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
       18:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       20:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      290:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
        6:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
        4:  140:        state->deckCount[i] = 0;
       16:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       12:  143:            state->deck[i][j] = estate;
       12:  144:            state->deckCount[i]++;
        -:  145:        }
       32:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       28:  148:            state->deck[i][j] = copper;
       28:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
        6:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
        4:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
        6:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
        4:  166:        state->handCount[i] = 0;
        4:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
       56:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       54:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        2:  182:    state->outpostPlayed = 0;
        2:  183:    state->phase = 0;
        2:  184:    state->numActions = 1;
        2:  185:    state->numBuys = 1;
        2:  186:    state->playedCardCount = 0;
        2:  187:    state->whoseTurn = 0;
        2:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       12:  192:    for (it = 0; it < 5; it++){
       10:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        2:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        2:  198:    return 0;
        -:  199:}
        -:  200:
        6:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
        6:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
        6:  209:    if (state->deckCount[player] < 1)
        2:  210:        return -1;
        4:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
       48:  214:    while (state->deckCount[player] > 0) {
       40:  215:        card = floor(Random() * state->deckCount[player]);
       40:  216:        newDeck[newDeckPos] = state->deck[player][card];
       40:  217:        newDeckPos++;
      140:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      100:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
       40:  221:        state->deckCount[player]--;
        -:  222:    }
       44:  223:    for (i = 0; i < newDeckPos; i++) {
       40:  224:        state->deck[player][i] = newDeck[i];
       40:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
        4:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        6:  320:int supplyCount(int card, struct gameState *state) {
        6:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        2:  346:int whoseTurn(struct gameState *state) {
        2:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
       22:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       22:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
        2:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
        2:  538:        state->deckCount[player] = state->discardCount[player];
        2:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
        2:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
        2:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
        2:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
        2:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:        if (deckCounter == 0)
        2:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       20:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       20:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       20:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       20:  576:        state->deckCount[player]--;
       20:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       20:  580:    return 0;
        -:  581:}
        -:  582:
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
    #####:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        2:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:    int i;
        -:  650:    int j;
        -:  651:    int k;
        -:  652:    int x;
        -:  653:    int index;
        2:  654:    int currentPlayer = whoseTurn(state);
        2:  655:    int nextPlayer = currentPlayer + 1;
        -:  656:
        2:  657:    int tributeRevealedCards[2] = {-1, -1};
        -:  658:    int temphand[MAX_HAND];// moved above the if statement
        2:  659:    int drawntreasure=0;
        -:  660:    int cardDrawn;
        2:  661:    int z = 0;// this is the counter for the temp hand
        2:  662:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  663:        nextPlayer = 0;
        -:  664:    }
        -:  665:
        2:  666:    int smithyFunc()
        -:  667:    {
        -:  668:        //+3 Cards
       12:  669:        for (i = 0; i < 5; i++)
        -:  670:        {
       10:  671:            drawCard(currentPlayer, state);
        -:  672:        }
        -:  673:
        -:  674:        //discard card from hand
        2:  675:        discardCard(handPos, currentPlayer, state, 0);
        2:  676:        return 0;
        -:  677:
        -:  678:    }
    #####:  679:    int adventurerFunc()
        -:  680:    {
    #####:  681:        while(drawntreasure<2){
    #####:  682:            if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:                shuffle(currentPlayer, state);
        -:  684:            }
    #####:  685:            drawCard(currentPlayer, state);
    #####:  686:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  687:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:                drawntreasure = drawntreasure + 3;
        -:  689:            else{
    #####:  690:                temphand[z]=cardDrawn;
    #####:  691:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:                z++;
        -:  693:            }
        -:  694:        }
    #####:  695:        while(z-1>=0){
    #####:  696:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  697:            z=z-1;
        -:  698:        }
    #####:  699:        return 0;
        -:  700:
        -:  701:    }
        -:  702:
        -:  703:
    #####:  704:    int councilFunc()
        -:  705:    {
        -:  706:        //+4 cards
    #####:  707:        for (i = 0; i < 5; i++)
        -:  708:        {
    #####:  709:            drawCard(currentPlayer, state);
        -:  710:        }
        -:  711:
        -:  712:        //+1 Buy
        -:  713:       // state->numBuys++;
        -:  714:
        -:  715:        //Each other player draws a card
    #####:  716:        for (i = 0; i < state->numPlayers; i++)
        -:  717:        {
    #####:  718:            if ( i != currentPlayer )
        -:  719:            {
    #####:  720:                drawCard(i, state);
        -:  721:            }
        -:  722:        }
        -:  723:
        -:  724:        //put played card in played card pile
    #####:  725:        discardCard(handPos, currentPlayer, state, 0);
        -:  726:
    #####:  727:        return 0;
        -:  728:    }
        2:  729:    int villageFunc()
        -:  730:    {
        -:  731:        //+1 Card
        2:  732:        drawCard(currentPlayer, state);
        -:  733:
        -:  734:        //+2 Actions
        2:  735:        state->numActions = state->numActions + 1;
        -:  736:
        -:  737:        //discard played card from hand
        2:  738:        discardCard(handPos, currentPlayer, state, 0);
        2:  739:        return 0;
        -:  740:    }
        -:  741:
    #####:  742:    int mineFunc()
        -:  743:    {
    #####:  744:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  745:
    #####:  746:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  747:        {
    #####:  748:            return -1;
        -:  749:        }
        -:  750:
    #####:  751:        if (choice2 > treasure_map || choice2 < curse)
        -:  752:        {
    #####:  753:            return -1;
        -:  754:        }
        -:  755:
    #####:  756:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  757:        {
    #####:  758:            return -1;
        -:  759:        }
        -:  760:
    #####:  761:        gainCard(choice2, state, 2, currentPlayer);
        -:  762:
        -:  763:        //discard card from hand
        -:  764:        //discardCard(handPos, currentPlayer, state, 0);
        -:  765:
        -:  766:        //discard trashed card
    #####:  767:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  768:        {
    #####:  769:            if (state->hand[currentPlayer][i] == j)
        -:  770:            {
    #####:  771:                discardCard(i, currentPlayer, state, 0);
    #####:  772:                break;
        -:  773:            }
        -:  774:        }
        -:  775:
    #####:  776:        return 0;
        -:  777:    }
        -:  778:    //uses switch to select card and perform actions
        2:  779:    switch( card )
        -:  780:    {
        -:  781:        case adventurer:
    #####:  782:            adventurerFunc();
        -:  783:
        -:  784:        case council_room:
    #####:  785:            councilFunc();
        -:  786:
        -:  787:        case feast:
        -:  788:            //gain card with cost up to 5
        -:  789:            //Backup hand
    #####:  790:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  791:                temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  792:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  793:            }
        -:  794:            //Backup hand
        -:  795:
        -:  796:            //Update Coins for Buy
    #####:  797:            updateCoins(currentPlayer, state, 5);
    #####:  798:            x = 1;//Condition to loop on
    #####:  799:            while( x == 1) {//Buy one card
    #####:  800:                if (supplyCount(choice1, state) <= 0){
        -:  801:                    if (DEBUG)
        -:  802:                        printf("None of that card left, sorry!\n");
        -:  803:
        -:  804:                    if (DEBUG){
        -:  805:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  806:                    }
        -:  807:                }
    #####:  808:                else if (state->coins < getCost(choice1)){
    #####:  809:                    printf("That card is too expensive!\n");
        -:  810:
        -:  811:                    if (DEBUG){
        -:  812:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  813:                    }
        -:  814:                }
        -:  815:                else{
        -:  816:
        -:  817:                    if (DEBUG){
        -:  818:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:                    }
        -:  820:
    #####:  821:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  822:                    x = 0;//No more buying cards
        -:  823:
        -:  824:                    if (DEBUG){
        -:  825:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  826:                    }
        -:  827:
        -:  828:                }
        -:  829:            }
        -:  830:
        -:  831:            //Reset Hand
    #####:  832:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  833:                state->hand[currentPlayer][i] = temphand[i];
    #####:  834:                temphand[i] = -1;
        -:  835:            }
        -:  836:            //Reset Hand
        -:  837:
    #####:  838:            return 0;
        -:  839:
        -:  840:        case gardens:
    #####:  841:            return -1;
        -:  842:
        -:  843:        case mine:
    #####:  844:            mineFunc();
        -:  845:
        -:  846:        case remodel:
    #####:  847:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  848:
    #####:  849:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  850:            {
    #####:  851:                return -1;
        -:  852:            }
        -:  853:
    #####:  854:            gainCard(choice2, state, 0, currentPlayer);
        -:  855:
        -:  856:            //discard card from hand
    #####:  857:            discardCard(handPos, currentPlayer, state, 0);
        -:  858:
        -:  859:            //discard trashed card
    #####:  860:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  861:            {
    #####:  862:                if (state->hand[currentPlayer][i] == j)
        -:  863:                {
    #####:  864:                    discardCard(i, currentPlayer, state, 0);
    #####:  865:                    break;
        -:  866:                }
        -:  867:            }
        -:  868:
        -:  869:
    #####:  870:            return 0;
        -:  871:
        -:  872:        case smithy:
        2:  873:            smithyFunc();
        -:  874:
        -:  875:        case village:
        2:  876:            villageFunc();
        -:  877:
        -:  878:        case baron:
        2:  879:            state->numBuys++;//Increase buys by 1!
        2:  880:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  881:                int p = 0;//Iterator for hand!
    #####:  882:                int card_not_discarded = 1;//Flag for discard set!
    #####:  883:                while(card_not_discarded){
    #####:  884:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  885:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  886:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  887:                        state->discardCount[currentPlayer]++;
    #####:  888:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  889:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  890:                        }
    #####:  891:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  892:                        state->handCount[currentPlayer]--;
    #####:  893:                        card_not_discarded = 0;//Exit the loop
        -:  894:                    }
    #####:  895:                    else if (p > state->handCount[currentPlayer]){
        -:  896:                        if(DEBUG) {
        -:  897:                            printf("No estate cards in your hand, invalid choice\n");
        -:  898:                            printf("Must gain an estate if there are any\n");
        -:  899:                        }
    #####:  900:                        if (supplyCount(estate, state) > 0){
    #####:  901:                            gainCard(estate, state, 0, currentPlayer);
    #####:  902:                            state->supplyCount[estate]--;//Decrement estates
    #####:  903:                            if (supplyCount(estate, state) == 0){
    #####:  904:                                isGameOver(state);
        -:  905:                            }
        -:  906:                        }
    #####:  907:                        card_not_discarded = 0;//Exit the loop
        -:  908:                    }
        -:  909:
        -:  910:                    else{
    #####:  911:                        p++;//Next card
        -:  912:                    }
        -:  913:                }
        -:  914:            }
        -:  915:
        -:  916:            else{
        2:  917:                if (supplyCount(estate, state) > 0){
        2:  918:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2:  919:                    state->supplyCount[estate]--;//Decrement Estates
        2:  920:                    if (supplyCount(estate, state) == 0){
    #####:  921:                        isGameOver(state);
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:
        2:  927:            return 0;
        -:  928:
        -:  929:        case great_hall:
        -:  930:            //+1 Card
    #####:  931:            drawCard(currentPlayer, state);
        -:  932:
        -:  933:            //+1 Actions
    #####:  934:            state->numActions++;
        -:  935:
        -:  936:            //discard card from hand
    #####:  937:            discardCard(handPos, currentPlayer, state, 0);
    #####:  938:            return 0;
        -:  939:
        -:  940:        case minion:
        -:  941:            //+1 action
    #####:  942:            state->numActions++;
        -:  943:
        -:  944:            //discard card from hand
    #####:  945:            discardCard(handPos, currentPlayer, state, 0);
        -:  946:
    #####:  947:            if (choice1)		//+2 coins
        -:  948:            {
    #####:  949:                state->coins = state->coins + 2;
        -:  950:            }
        -:  951:
    #####:  952:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  953:            {
        -:  954:                //discard hand
    #####:  955:                while(numHandCards(state) > 0)
        -:  956:                {
    #####:  957:                    discardCard(handPos, currentPlayer, state, 0);
        -:  958:                }
        -:  959:
        -:  960:                //draw 4
    #####:  961:                for (i = 0; i < 4; i++)
        -:  962:                {
    #####:  963:                    drawCard(currentPlayer, state);
        -:  964:                }
        -:  965:
        -:  966:                //other players discard hand and redraw if hand size > 4
    #####:  967:                for (i = 0; i < state->numPlayers; i++)
        -:  968:                {
    #####:  969:                    if (i != currentPlayer)
        -:  970:                    {
    #####:  971:                        if ( state->handCount[i] > 4 )
        -:  972:                        {
        -:  973:                            //discard hand
    #####:  974:                            while( state->handCount[i] > 0 )
        -:  975:                            {
    #####:  976:                                discardCard(handPos, i, state, 0);
        -:  977:                            }
        -:  978:
        -:  979:                            //draw 4
    #####:  980:                            for (j = 0; j < 4; j++)
        -:  981:                            {
    #####:  982:                                drawCard(i, state);
        -:  983:                            }
        -:  984:                        }
        -:  985:                    }
        -:  986:                }
        -:  987:
        -:  988:            }
    #####:  989:            return 0;
        -:  990:
        -:  991:        case steward:
    #####:  992:            if (choice1 == 1)
        -:  993:            {
        -:  994:                //+2 cards
    #####:  995:                drawCard(currentPlayer, state);
    #####:  996:                drawCard(currentPlayer, state);
        -:  997:            }
    #####:  998:            else if (choice1 == 2)
        -:  999:            {
        -: 1000:                //+2 coins
    #####: 1001:                state->coins = state->coins + 2;
        -: 1002:            }
        -: 1003:            else
        -: 1004:            {
        -: 1005:                //trash 2 cards in hand
    #####: 1006:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1007:                discardCard(choice3, currentPlayer, state, 1);
        -: 1008:            }
        -: 1009:
        -: 1010:            //discard card from hand
    #####: 1011:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1012:            return 0;
        -: 1013:
        -: 1014:        case tribute:
    #####: 1015:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1016:                if (state->deckCount[nextPlayer] > 0){
    #####: 1017:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1018:                    state->deckCount[nextPlayer]--;
        -: 1019:                }
    #####: 1020:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1021:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1022:                    state->discardCount[nextPlayer]--;
        -: 1023:                }
        -: 1024:                else{
        -: 1025:                    //No Card to Reveal
        -: 1026:                    if (DEBUG){
        -: 1027:                        printf("No cards to reveal\n");
        -: 1028:                    }
        -: 1029:                }
        -: 1030:            }
        -: 1031:
        -: 1032:            else{
    #####: 1033:                if (state->deckCount[nextPlayer] == 0){
    #####: 1034:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1035:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1036:                        state->deckCount[nextPlayer]++;
    #####: 1037:                        state->discard[nextPlayer][i] = -1;
    #####: 1038:                        state->discardCount[nextPlayer]--;
        -: 1039:                    }
        -: 1040:
    #####: 1041:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1042:                }
    #####: 1043:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:                state->deckCount[nextPlayer]--;
    #####: 1046:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
        -: 1049:            }
        -: 1050:
    #####: 1051:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1052:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1053:                state->playedCardCount++;
    #####: 1054:                tributeRevealedCards[1] = -1;
        -: 1055:            }
        -: 1056:
    #####: 1057:            for (i = 0; i <= 2; i ++){
    #####: 1058:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1059:                    state->coins += 2;
        -: 1060:                }
        -: 1061:
    #####: 1062:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1063:                    drawCard(currentPlayer, state);
    #####: 1064:                    drawCard(currentPlayer, state);
        -: 1065:                }
        -: 1066:                else{//Action Card
    #####: 1067:                    state->numActions = state->numActions + 2;
        -: 1068:                }
        -: 1069:            }
        -: 1070:
    #####: 1071:            return 0;
        -: 1072:
        -: 1073:        case ambassador:
    #####: 1074:            j = 0;		//used to check if player has enough cards to discard
        -: 1075:
    #####: 1076:            if (choice2 > 2 || choice2 < 0)
        -: 1077:            {
    #####: 1078:                return -1;
        -: 1079:            }
        -: 1080:
    #####: 1081:            if (choice1 == handPos)
        -: 1082:            {
    #####: 1083:                return -1;
        -: 1084:            }
        -: 1085:
    #####: 1086:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1087:            {
    #####: 1088:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1089:                {
    #####: 1090:                    j++;
        -: 1091:                }
        -: 1092:            }
    #####: 1093:            if (j < choice2)
        -: 1094:            {
    #####: 1095:                return -1;
        -: 1096:            }
        -: 1097:
        -: 1098:            if (DEBUG)
        -: 1099:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1100:
        -: 1101:            //increase supply count for choosen card by amount being discarded
    #####: 1102:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1103:
        -: 1104:            //each other player gains a copy of revealed card
    #####: 1105:            for (i = 0; i < state->numPlayers; i++)
        -: 1106:            {
    #####: 1107:                if (i != currentPlayer)
        -: 1108:                {
    #####: 1109:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1110:                }
        -: 1111:            }
        -: 1112:
        -: 1113:            //discard played card from hand
    #####: 1114:            discardCard(handPos, currentPlayer, state, 0);
        -: 1115:
        -: 1116:            //trash copies of cards returned to supply
    #####: 1117:            for (j = 0; j < choice2; j++)
        -: 1118:            {
    #####: 1119:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:                {
    #####: 1121:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1122:                    {
    #####: 1123:                        discardCard(i, currentPlayer, state, 1);
    #####: 1124:                        break;
        -: 1125:                    }
        -: 1126:                }
        -: 1127:            }
        -: 1128:
    #####: 1129:            return 0;
        -: 1130:
        -: 1131:        case cutpurse:
        -: 1132:
    #####: 1133:            updateCoins(currentPlayer, state, 2);
    #####: 1134:            for (i = 0; i < state->numPlayers; i++)
        -: 1135:            {
    #####: 1136:                if (i != currentPlayer)
        -: 1137:                {
    #####: 1138:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1139:                    {
    #####: 1140:                        if (state->hand[i][j] == copper)
        -: 1141:                        {
    #####: 1142:                            discardCard(j, i, state, 0);
    #####: 1143:                            break;
        -: 1144:                        }
    #####: 1145:                        if (j == state->handCount[i])
        -: 1146:                        {
    #####: 1147:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1148:                            {
        -: 1149:                                if (DEBUG)
        -: 1150:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1151:                            }
    #####: 1152:                            break;
        -: 1153:                        }
        -: 1154:                    }
        -: 1155:
        -: 1156:                }
        -: 1157:
        -: 1158:            }
        -: 1159:
        -: 1160:            //discard played card from hand
    #####: 1161:            discardCard(handPos, currentPlayer, state, 0);
        -: 1162:
    #####: 1163:            return 0;
        -: 1164:
        -: 1165:
        -: 1166:        case embargo:
        -: 1167:        {
        -: 1168:            //+2 Coins
    #####: 1169:            state->coins = state->coins + 2;
        -: 1170:
        -: 1171:            //see if selected pile is in play
    #####: 1172:            if ( state->supplyCount[choice1] == -1 )
        -: 1173:            {
    #####: 1174:                return -1;
        -: 1175:            }
        -: 1176:
        -: 1177:            //add embargo token to selected supply pile
    #####: 1178:            state->embargoTokens[choice1]++;
        -: 1179:
        -: 1180:            //trash card
    #####: 1181:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1182:            return 0;
        -: 1183:        }
        -: 1184:
        -: 1185:
        -: 1186:        case outpost:
        -: 1187:            //set outpost flag
    #####: 1188:            state->outpostPlayed++;
        -: 1189:
        -: 1190:            //discard card
    #####: 1191:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1192:            return 0;
        -: 1193:
        -: 1194:        case salvager:
        -: 1195:            //+1 buy
    #####: 1196:            state->numBuys++;
        -: 1197:
    #####: 1198:            if (choice1)
        -: 1199:            {
        -: 1200:                //gain coins equal to trashed card
    #####: 1201:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:                //trash card
    #####: 1203:                discardCard(choice1, currentPlayer, state, 1);
        -: 1204:            }
        -: 1205:
        -: 1206:            //discard card
    #####: 1207:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:            return 0;
        -: 1209:
        -: 1210:        case sea_hag:
    #####: 1211:            for (i = 0; i < state->numPlayers; i++){
    #####: 1212:                if (i != currentPlayer){
    #####: 1213:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:                    state->discardCount[i]++;
    #####: 1215:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:                }
        -: 1217:            }
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case treasure_map:
        -: 1221:            //search hand for another treasure_map
    #####: 1222:            index = -1;
    #####: 1223:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:            {
    #####: 1225:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:                {
    #####: 1227:                    index = i;
    #####: 1228:                    break;
        -: 1229:                }
        -: 1230:            }
    #####: 1231:            if (index > -1)
        -: 1232:            {
        -: 1233:                //trash both treasure cards
    #####: 1234:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:                discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:                //gain 4 Gold cards
    #####: 1238:                for (i = 0; i < 4; i++)
        -: 1239:                {
    #####: 1240:                    gainCard(gold, state, 1, currentPlayer);
        -: 1241:                }
        -: 1242:
        -: 1243:                //return success
    #####: 1244:                return 1;
        -: 1245:            }
        -: 1246:
        -: 1247:            //no second treasure_map found in hand
    #####: 1248:            return -1;
        -: 1249:    }
        -: 1250:
    #####: 1251:    return -1;
        -: 1252:}
        -: 1253:
        4: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:    //if card is not trashed, added to Played pile
        4: 1258:    if (trashFlag < 1)
        -: 1259:    {
        -: 1260:        //add card to played pile
        4: 1261:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        4: 1262:        state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:    //set played card to -1
        4: 1266:    state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:    //remove card from player's hand
        4: 1269:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:        //reduce number of cards in hand
    #####: 1272:        state->handCount[currentPlayer]--;
        -: 1273:    }
        4: 1274:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:        //reduce number of cards in hand
    #####: 1277:        state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:    else
        -: 1280:    {
        -: 1281:        //replace discarded card with last card in hand
        4: 1282:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:        //set last card to -1
        4: 1284:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:        //reduce number of cards in hand
        4: 1286:        state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
        4: 1289:    return 0;
        -: 1290:}
        -: 1291:
        2: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:    //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:    //check if supply pile is empty (0) or card is not used in game (-1)
        2: 1297:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:        return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:    //added card for [whoseTurn] current player:
        -: 1303:    // toFlag = 0 : add to discard
        -: 1304:    // toFlag = 1 : add to deck
        -: 1305:    // toFlag = 2 : add to hand
        -: 1306:
        2: 1307:    if (toFlag == 1)
        -: 1308:    {
    #####: 1309:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:        state->deckCount[player]++;
        -: 1311:    }
        2: 1312:    else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:        state->handCount[player]++;
        -: 1316:    }
        -: 1317:    else
        -: 1318:    {
        2: 1319:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1320:        state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:    //decrease number in supply pile
        2: 1324:    state->supplyCount[supplyPos]--;
        -: 1325:
        2: 1326:    return 0;
        -: 1327:}
        -: 1328:
        2: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:    int i;
        -: 1332:
        -: 1333:    //reset coin count
        2: 1334:    state->coins = 0;
        -: 1335:
        -: 1336:    //add coins for each Treasure card in player's hand
       12: 1337:    for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
       10: 1339:        if (state->hand[player][i] == copper)
        -: 1340:        {
        8: 1341:            state->coins += 1;
        -: 1342:        }
        2: 1343:        else if (state->hand[player][i] == silver)
        -: 1344:        {
    #####: 1345:            state->coins += 2;
        -: 1346:        }
        2: 1347:        else if (state->hand[player][i] == gold)
        -: 1348:        {
    #####: 1349:            state->coins += 3;
        -: 1350:        }
        -: 1351:    }
        -: 1352:
        -: 1353:    //add bonus
        2: 1354:    state->coins += bonus;
        -: 1355:
        2: 1356:    return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c

-------------------
cardtest4
File 'dominion.c'
Lines executed:31.47% of 556
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
      180:   11:    if (*(int*)a < *(int*)b)
       48:   12:        return -1;
      132:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:                  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        6:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:                   struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;
        -:   43:    //set up random number generator
        6:   44:    SelectStream(1);
        6:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        6:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        6:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       66:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      600:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
    #####:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        6:   73:    if (numPlayers == 2)
        -:   74:    {
        6:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        6:   87:    if (numPlayers == 2)
        -:   88:    {
        6:   89:        state->supplyCount[estate] = 8;
        6:   90:        state->supplyCount[duchy] = 8;
        6:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        6:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:    state->supplyCount[silver] = 40;
        6:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      126:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      930:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       60:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
       12:  115:                    if (numPlayers == 2){
        6:  116:                        state->supplyCount[i] = 8;
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
       54:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       60:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      870:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
       18:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:        state->deckCount[i] = 0;
       48:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       36:  143:            state->deck[i][j] = estate;
       36:  144:            state->deckCount[i]++;
        -:  145:        }
       96:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       84:  148:            state->deck[i][j] = copper;
       84:  149:            state->deckCount[i]++;
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
       18:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
       18:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:        //initialize hand size to zero
       12:  166:        state->handCount[i] = 0;
       12:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
      168:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        6:  182:    state->outpostPlayed = 0;
        6:  183:    state->phase = 0;
        6:  184:    state->numActions = 1;
        6:  185:    state->numBuys = 1;
        6:  186:    state->playedCardCount = 0;
        6:  187:    state->whoseTurn = 0;
        6:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       36:  192:    for (it = 0; it < 5; it++){
       30:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        6:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:    return 0;
        -:  199:}
        -:  200:
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:    int newDeck[MAX_DECK];
       14:  205:    int newDeckPos = 0;
        -:  206:    int card;
        -:  207:    int i;
        -:  208:
       14:  209:    if (state->deckCount[player] < 1)
        2:  210:        return -1;
       12:  211:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:    while (state->deckCount[player] > 0) {
      120:  215:        card = floor(Random() * state->deckCount[player]);
      120:  216:        newDeck[newDeckPos] = state->deck[player][card];
      120:  217:        newDeckPos++;
      420:  218:        for (i = card; i < state->deckCount[player]-1; i++) {
      300:  219:            state->deck[player][i] = state->deck[player][i+1];
        -:  220:        }
      120:  221:        state->deckCount[player]--;
        -:  222:    }
      132:  223:    for (i = 0; i < newDeckPos; i++) {
      120:  224:        state->deck[player][i] = newDeck[i];
      120:  225:        state->deckCount[player]++;
        -:  226:    }
        -:  227:
       12:  228:    return 0;
        -:  229:}
        -:  230:
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:    int card;
    #####:  234:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:    //check if it is the right phase
    #####:  237:    if (state->phase != 0)
        -:  238:    {
    #####:  239:        return -1;
        -:  240:    }
        -:  241:
        -:  242:    //check if player has enough actions
    #####:  243:    if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:        return -1;
        -:  246:    }
        -:  247:
        -:  248:    //get card played
    #####:  249:    card = handCard(handPos, state);
        -:  250:
        -:  251:    //check if selected card is an action
    #####:  252:    if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:        return -1;
        -:  255:    }
        -:  256:
        -:  257:    //play card
    #####:  258:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:        return -1;
        -:  261:    }
        -:  262:
        -:  263:    //reduce number of actions
    #####:  264:    state->numActions--;
        -:  265:
        -:  266:    //update coins (Treasure cards may be added with card draws)
    #####:  267:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
    #####:  269:    return 0;
        -:  270:}
        -:  271:
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:    int who;
        -:  274:    if (DEBUG){
        -:  275:        printf("Entering buyCard...\n");
        -:  276:    }
        -:  277:
        -:  278:    // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:    who = state->whoseTurn;
        -:  281:
    #####:  282:    if (state->numBuys < 1){
        -:  283:        if (DEBUG)
        -:  284:            printf("You do not have any buys left\n");
    #####:  285:        return -1;
    #####:  286:    } else if (supplyCount(supplyPos, state) <1){
        -:  287:        if (DEBUG)
        -:  288:            printf("There are not any of that type of card left\n");
    #####:  289:        return -1;
    #####:  290:    } else if (state->coins < getCost(supplyPos)){
        -:  291:        if (DEBUG)
        -:  292:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:        return -1;
        -:  294:    } else {
    #####:  295:        state->phase=1;
        -:  296:        //state->supplyCount[supplyPos]--;
    #####:  297:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
    #####:  299:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  300:        state->numBuys--;
        -:  301:        if (DEBUG)
        -:  302:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:    }
        -:  304:
        -:  305:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:    //state->discardCount[who]++;
        -:  307:
    #####:  308:    return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:    return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:    int currentPlayer = whoseTurn(state);
    #####:  317:    return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
       14:  320:int supplyCount(int card, struct gameState *state) {
       14:  321:    return state->supplyCount[card];
        -:  322:}
        -:  323:
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:    int i;
    #####:  326:    int count = 0;
        -:  327:
    #####:  328:    for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:        if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
    #####:  333:    for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:        if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
    #####:  338:    for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:        if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
    #####:  343:    return count;
        -:  344:}
        -:  345:
        6:  346:int whoseTurn(struct gameState *state) {
        6:  347:    return state->whoseTurn;
        -:  348:}
        -:  349:
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:    int k;
        -:  352:    int i;
    #####:  353:    int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:    //Discard hand
    #####:  356:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  357:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:    }
    #####:  360:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:    //Code for determining the player
    #####:  363:    if (currentPlayer < (state->numPlayers - 1)){
    #####:  364:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:    }
        -:  366:    else{
    #####:  367:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:    }
        -:  369:
    #####:  370:    state->outpostPlayed = 0;
    #####:  371:    state->phase = 0;
    #####:  372:    state->numActions = 1;
    #####:  373:    state->coins = 0;
    #####:  374:    state->numBuys = 1;
    #####:  375:    state->playedCardCount = 0;
    #####:  376:    state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:    //int k; move to top
        -:  379:    //Next player draws hand
    #####:  380:    for (k = 0; k < 5; k++){
    #####:  381:        drawCard(state->whoseTurn, state);//Draw a card
        -:  382:    }
        -:  383:
        -:  384:    //Update money
    #####:  385:    updateCoins(state->whoseTurn, state , 0);
        -:  386:
    #####:  387:    return 0;
        -:  388:}
        -:  389:
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:    int i;
        -:  392:    int j;
        -:  393:
        -:  394:    //if stack of Province cards is empty, the game ends
    #####:  395:    if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:        return 1;
        -:  398:    }
        -:  399:
        -:  400:    //if three supply pile are at 0, the game ends
    #####:  401:    j = 0;
    #####:  402:    for (i = 0; i < 25; i++)
        -:  403:    {
    #####:  404:        if (state->supplyCount[i] == 0)
        -:  405:        {
    #####:  406:            j++;
        -:  407:        }
        -:  408:    }
    #####:  409:    if ( j >= 3)
        -:  410:    {
    #####:  411:        return 1;
        -:  412:    }
        -:  413:
    #####:  414:    return 0;
        -:  415:}
        -:  416:
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:    int i;
    #####:  420:    int score = 0;
        -:  421:    //score from hand
    #####:  422:    for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
    #####:  424:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  425:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  426:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  427:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  428:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:    //score from discard
    #####:  433:    for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
    #####:  435:        if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  436:        if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  437:        if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  438:        if (state->discard[player][i] == province) { score = score + 6; };
    #####:  439:        if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  440:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:    //score from deck
    #####:  444:    for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
    #####:  446:        if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  447:        if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  448:        if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  449:        if (state->deck[player][i] == province) { score = score + 6; };
    #####:  450:        if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  451:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
    #####:  454:    return score;
        -:  455:}
        -:  456:
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:    int i;
        -:  459:    int j;
        -:  460:    int highScore;
        -:  461:    int currentPlayer;
        -:  462:
        -:  463:    //get score for each player
    #####:  464:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:        //set unused player scores to -9999
    #####:  467:        if (i >= state->numPlayers)
        -:  468:        {
    #####:  469:            players[i] = -9999;
        -:  470:        }
        -:  471:        else
        -:  472:        {
    #####:  473:            players[i] = scoreFor (i, state);
        -:  474:        }
        -:  475:    }
        -:  476:
        -:  477:    //find highest score
    #####:  478:    j = 0;
    #####:  479:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:        if (players[i] > players[j])
        -:  482:        {
    #####:  483:            j = i;
        -:  484:        }
        -:  485:    }
    #####:  486:    highScore = players[j];
        -:  487:
        -:  488:    //add 1 to players who had less turns
    #####:  489:    currentPlayer = whoseTurn(state);
    #####:  490:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:        if ( players[i] == highScore && i > currentPlayer )
        -:  493:        {
    #####:  494:            players[i]++;
        -:  495:        }
        -:  496:    }
        -:  497:
        -:  498:    //find new highest score
    #####:  499:    j = 0;
    #####:  500:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:        if ( players[i] > players[j] )
        -:  503:        {
    #####:  504:            j = i;
        -:  505:        }
        -:  506:    }
    #####:  507:    highScore = players[j];
        -:  508:
        -:  509:    //set winners in array to 1 and rest to 0
    #####:  510:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:        if ( players[i] == highScore )
        -:  513:        {
    #####:  514:            players[i] = 1;
        -:  515:        }
        -:  516:        else
        -:  517:        {
    #####:  518:            players[i] = 0;
        -:  519:        }
        -:  520:    }
        -:  521:
    #####:  522:    return 0;
        -:  523:}
        -:  524:
       66:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:    int deckCounter;
       66:  528:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:        //Step 1 Shuffle the discard pile back into a deck
        -:  531:        int i;
        -:  532:        //Move discard to deck
        2:  533:        for (i = 0; i < state->discardCount[player];i++){
    #####:  534:            state->deck[player][i] = state->discard[player][i];
    #####:  535:            state->discard[player][i] = -1;
        -:  536:        }
        -:  537:
        2:  538:        state->deckCount[player] = state->discardCount[player];
        2:  539:        state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:        //Shufffle the deck
        2:  542:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:        if (DEBUG){//Debug statements
        -:  545:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:        }
        -:  547:
        2:  548:        state->discardCount[player] = 0;
        -:  549:
        -:  550:        //Step 2 Draw Card
        2:  551:        count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:        if (DEBUG){//Debug statements
        -:  554:            printf("Current hand count: %d\n", count);
        -:  555:        }
        -:  556:
        2:  557:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        2:  559:        if (deckCounter == 0)
        2:  560:            return -1;
        -:  561:
    #####:  562:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:        state->deckCount[player]--;
    #####:  564:        state->handCount[player]++;//Increment hand count
        -:  565:    }
        -:  566:
        -:  567:    else{
       64:  568:        int count = state->handCount[player];//Get current hand count for player
        -:  569:        int deckCounter;
        -:  570:        if (DEBUG){//Debug statements
        -:  571:            printf("Current hand count: %d\n", count);
        -:  572:        }
        -:  573:
       64:  574:        deckCounter = state->deckCount[player];//Create holder for the deck count
       64:  575:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       64:  576:        state->deckCount[player]--;
       64:  577:        state->handCount[player]++;//Increment hand count
        -:  578:    }
        -:  579:
       64:  580:    return 0;
        -:  581:}
        -:  582:
        4:  583:int getCost(int cardNumber)
        -:  584:{
        4:  585:    switch( cardNumber )
        -:  586:    {
        -:  587:        case curse:
    #####:  588:            return 0;
        -:  589:        case estate:
    #####:  590:            return 2;
        -:  591:        case duchy:
    #####:  592:            return 5;
        -:  593:        case province:
    #####:  594:            return 8;
        -:  595:        case copper:
    #####:  596:            return 0;
        -:  597:        case silver:
    #####:  598:            return 3;
        -:  599:        case gold:
    #####:  600:            return 6;
        -:  601:        case adventurer:
    #####:  602:            return 6;
        -:  603:        case council_room:
    #####:  604:            return 5;
        -:  605:        case feast:
    #####:  606:            return 4;
        -:  607:        case gardens:
    #####:  608:            return 4;
        -:  609:        case mine:
    #####:  610:            return 5;
        -:  611:        case remodel:
    #####:  612:            return 4;
        -:  613:        case smithy:
    #####:  614:            return 4;
        -:  615:        case village:
    #####:  616:            return 3;
        -:  617:        case baron:
    #####:  618:            return 4;
        -:  619:        case great_hall:
    #####:  620:            return 3;
        -:  621:        case minion:
    #####:  622:            return 5;
        -:  623:        case steward:
    #####:  624:            return 3;
        -:  625:        case tribute:
    #####:  626:            return 5;
        -:  627:        case ambassador:
    #####:  628:            return 3;
        -:  629:        case cutpurse:
    #####:  630:            return 4;
        -:  631:        case embargo:
    #####:  632:            return 2;
        -:  633:        case outpost:
    #####:  634:            return 5;
        -:  635:        case salvager:
    #####:  636:            return 4;
        -:  637:        case sea_hag:
    #####:  638:            return 4;
        -:  639:        case treasure_map:
    #####:  640:            return 4;
        -:  641:    }
        -:  642:
        4:  643:    return -1;
        -:  644:}
        -:  645:
        -:  646:
        6:  647:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  648:{
        -:  649:    int i;
        -:  650:    int j;
        -:  651:    int k;
        -:  652:    int x;
        -:  653:    int index;
        6:  654:    int currentPlayer = whoseTurn(state);
        6:  655:    int nextPlayer = currentPlayer + 1;
        -:  656:
        6:  657:    int tributeRevealedCards[2] = {-1, -1};
        -:  658:    int temphand[MAX_HAND];// moved above the if statement
        6:  659:    int drawntreasure=0;
        -:  660:    int cardDrawn;
        6:  661:    int z = 0;// this is the counter for the temp hand
        6:  662:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  663:        nextPlayer = 0;
        -:  664:    }
        -:  665:
        2:  666:    int smithyFunc()
        -:  667:    {
        -:  668:        //+3 Cards
       12:  669:        for (i = 0; i < 5; i++)
        -:  670:        {
       10:  671:            drawCard(currentPlayer, state);
        -:  672:        }
        -:  673:
        -:  674:        //discard card from hand
        2:  675:        discardCard(handPos, currentPlayer, state, 0);
        2:  676:        return 0;
        -:  677:
        -:  678:    }
    #####:  679:    int adventurerFunc()
        -:  680:    {
    #####:  681:        while(drawntreasure<2){
    #####:  682:            if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  683:                shuffle(currentPlayer, state);
        -:  684:            }
    #####:  685:            drawCard(currentPlayer, state);
    #####:  686:            cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  687:            if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  688:                drawntreasure = drawntreasure + 3;
        -:  689:            else{
    #####:  690:                temphand[z]=cardDrawn;
    #####:  691:                state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  692:                z++;
        -:  693:            }
        -:  694:        }
    #####:  695:        while(z-1>=0){
    #####:  696:            state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  697:            z=z-1;
        -:  698:        }
    #####:  699:        return 0;
        -:  700:
        -:  701:    }
        -:  702:
        -:  703:
        4:  704:    int councilFunc()
        -:  705:    {
        -:  706:        //+4 cards
       24:  707:        for (i = 0; i < 5; i++)
        -:  708:        {
       20:  709:            drawCard(currentPlayer, state);
        -:  710:        }
        -:  711:
        -:  712:        //+1 Buy
        -:  713:       // state->numBuys++;
        -:  714:
        -:  715:        //Each other player draws a card
       12:  716:        for (i = 0; i < state->numPlayers; i++)
        -:  717:        {
        8:  718:            if ( i != currentPlayer )
        -:  719:            {
        4:  720:                drawCard(i, state);
        -:  721:            }
        -:  722:        }
        -:  723:
        -:  724:        //put played card in played card pile
        4:  725:        discardCard(handPos, currentPlayer, state, 0);
        -:  726:
        4:  727:        return 0;
        -:  728:    }
        2:  729:    int villageFunc()
        -:  730:    {
        -:  731:        //+1 Card
        2:  732:        drawCard(currentPlayer, state);
        -:  733:
        -:  734:        //+2 Actions
        2:  735:        state->numActions = state->numActions + 1;
        -:  736:
        -:  737:        //discard played card from hand
        2:  738:        discardCard(handPos, currentPlayer, state, 0);
        2:  739:        return 0;
        -:  740:    }
        -:  741:
    #####:  742:    int mineFunc()
        -:  743:    {
    #####:  744:        j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  745:
    #####:  746:        if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  747:        {
    #####:  748:            return -1;
        -:  749:        }
        -:  750:
    #####:  751:        if (choice2 > treasure_map || choice2 < curse)
        -:  752:        {
    #####:  753:            return -1;
        -:  754:        }
        -:  755:
    #####:  756:        if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  757:        {
    #####:  758:            return -1;
        -:  759:        }
        -:  760:
    #####:  761:        gainCard(choice2, state, 2, currentPlayer);
        -:  762:
        -:  763:        //discard card from hand
        -:  764:        //discardCard(handPos, currentPlayer, state, 0);
        -:  765:
        -:  766:        //discard trashed card
    #####:  767:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  768:        {
    #####:  769:            if (state->hand[currentPlayer][i] == j)
        -:  770:            {
    #####:  771:                discardCard(i, currentPlayer, state, 0);
    #####:  772:                break;
        -:  773:            }
        -:  774:        }
        -:  775:
    #####:  776:        return 0;
        -:  777:    }
        -:  778:    //uses switch to select card and perform actions
        6:  779:    switch( card )
        -:  780:    {
        -:  781:        case adventurer:
    #####:  782:            adventurerFunc();
        -:  783:
        -:  784:        case council_room:
        4:  785:            councilFunc();
        -:  786:
        -:  787:        case feast:
        -:  788:            //gain card with cost up to 5
        -:  789:            //Backup hand
       44:  790:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
       40:  791:                temphand[i] = state->hand[currentPlayer][i];//Backup card
       40:  792:                state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  793:            }
        -:  794:            //Backup hand
        -:  795:
        -:  796:            //Update Coins for Buy
        4:  797:            updateCoins(currentPlayer, state, 5);
        4:  798:            x = 1;//Condition to loop on
       12:  799:            while( x == 1) {//Buy one card
        4:  800:                if (supplyCount(choice1, state) <= 0){
        -:  801:                    if (DEBUG)
        -:  802:                        printf("None of that card left, sorry!\n");
        -:  803:
        -:  804:                    if (DEBUG){
        -:  805:                        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  806:                    }
        -:  807:                }
        4:  808:                else if (state->coins < getCost(choice1)){
    #####:  809:                    printf("That card is too expensive!\n");
        -:  810:
        -:  811:                    if (DEBUG){
        -:  812:                        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  813:                    }
        -:  814:                }
        -:  815:                else{
        -:  816:
        -:  817:                    if (DEBUG){
        -:  818:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  819:                    }
        -:  820:
        4:  821:                    gainCard(choice1, state, 0, currentPlayer);//Gain the card
        4:  822:                    x = 0;//No more buying cards
        -:  823:
        -:  824:                    if (DEBUG){
        -:  825:                        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  826:                    }
        -:  827:
        -:  828:                }
        -:  829:            }
        -:  830:
        -:  831:            //Reset Hand
       44:  832:            for (i = 0; i <= state->handCount[currentPlayer]; i++){
       40:  833:                state->hand[currentPlayer][i] = temphand[i];
       40:  834:                temphand[i] = -1;
        -:  835:            }
        -:  836:            //Reset Hand
        -:  837:
        4:  838:            return 0;
        -:  839:
        -:  840:        case gardens:
    #####:  841:            return -1;
        -:  842:
        -:  843:        case mine:
    #####:  844:            mineFunc();
        -:  845:
        -:  846:        case remodel:
    #####:  847:            j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  848:
    #####:  849:            if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  850:            {
    #####:  851:                return -1;
        -:  852:            }
        -:  853:
    #####:  854:            gainCard(choice2, state, 0, currentPlayer);
        -:  855:
        -:  856:            //discard card from hand
    #####:  857:            discardCard(handPos, currentPlayer, state, 0);
        -:  858:
        -:  859:            //discard trashed card
    #####:  860:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  861:            {
    #####:  862:                if (state->hand[currentPlayer][i] == j)
        -:  863:                {
    #####:  864:                    discardCard(i, currentPlayer, state, 0);
    #####:  865:                    break;
        -:  866:                }
        -:  867:            }
        -:  868:
        -:  869:
    #####:  870:            return 0;
        -:  871:
        -:  872:        case smithy:
        2:  873:            smithyFunc();
        -:  874:
        -:  875:        case village:
        2:  876:            villageFunc();
        -:  877:
        -:  878:        case baron:
        2:  879:            state->numBuys++;//Increase buys by 1!
        2:  880:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  881:                int p = 0;//Iterator for hand!
    #####:  882:                int card_not_discarded = 1;//Flag for discard set!
    #####:  883:                while(card_not_discarded){
    #####:  884:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  885:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  886:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  887:                        state->discardCount[currentPlayer]++;
    #####:  888:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  889:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  890:                        }
    #####:  891:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  892:                        state->handCount[currentPlayer]--;
    #####:  893:                        card_not_discarded = 0;//Exit the loop
        -:  894:                    }
    #####:  895:                    else if (p > state->handCount[currentPlayer]){
        -:  896:                        if(DEBUG) {
        -:  897:                            printf("No estate cards in your hand, invalid choice\n");
        -:  898:                            printf("Must gain an estate if there are any\n");
        -:  899:                        }
    #####:  900:                        if (supplyCount(estate, state) > 0){
    #####:  901:                            gainCard(estate, state, 0, currentPlayer);
    #####:  902:                            state->supplyCount[estate]--;//Decrement estates
    #####:  903:                            if (supplyCount(estate, state) == 0){
    #####:  904:                                isGameOver(state);
        -:  905:                            }
        -:  906:                        }
    #####:  907:                        card_not_discarded = 0;//Exit the loop
        -:  908:                    }
        -:  909:
        -:  910:                    else{
    #####:  911:                        p++;//Next card
        -:  912:                    }
        -:  913:                }
        -:  914:            }
        -:  915:
        -:  916:            else{
        2:  917:                if (supplyCount(estate, state) > 0){
        2:  918:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2:  919:                    state->supplyCount[estate]--;//Decrement Estates
        2:  920:                    if (supplyCount(estate, state) == 0){
    #####:  921:                        isGameOver(state);
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:
        2:  927:            return 0;
        -:  928:
        -:  929:        case great_hall:
        -:  930:            //+1 Card
    #####:  931:            drawCard(currentPlayer, state);
        -:  932:
        -:  933:            //+1 Actions
    #####:  934:            state->numActions++;
        -:  935:
        -:  936:            //discard card from hand
    #####:  937:            discardCard(handPos, currentPlayer, state, 0);
    #####:  938:            return 0;
        -:  939:
        -:  940:        case minion:
        -:  941:            //+1 action
    #####:  942:            state->numActions++;
        -:  943:
        -:  944:            //discard card from hand
    #####:  945:            discardCard(handPos, currentPlayer, state, 0);
        -:  946:
    #####:  947:            if (choice1)		//+2 coins
        -:  948:            {
    #####:  949:                state->coins = state->coins + 2;
        -:  950:            }
        -:  951:
    #####:  952:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  953:            {
        -:  954:                //discard hand
    #####:  955:                while(numHandCards(state) > 0)
        -:  956:                {
    #####:  957:                    discardCard(handPos, currentPlayer, state, 0);
        -:  958:                }
        -:  959:
        -:  960:                //draw 4
    #####:  961:                for (i = 0; i < 4; i++)
        -:  962:                {
    #####:  963:                    drawCard(currentPlayer, state);
        -:  964:                }
        -:  965:
        -:  966:                //other players discard hand and redraw if hand size > 4
    #####:  967:                for (i = 0; i < state->numPlayers; i++)
        -:  968:                {
    #####:  969:                    if (i != currentPlayer)
        -:  970:                    {
    #####:  971:                        if ( state->handCount[i] > 4 )
        -:  972:                        {
        -:  973:                            //discard hand
    #####:  974:                            while( state->handCount[i] > 0 )
        -:  975:                            {
    #####:  976:                                discardCard(handPos, i, state, 0);
        -:  977:                            }
        -:  978:
        -:  979:                            //draw 4
    #####:  980:                            for (j = 0; j < 4; j++)
        -:  981:                            {
    #####:  982:                                drawCard(i, state);
        -:  983:                            }
        -:  984:                        }
        -:  985:                    }
        -:  986:                }
        -:  987:
        -:  988:            }
    #####:  989:            return 0;
        -:  990:
        -:  991:        case steward:
    #####:  992:            if (choice1 == 1)
        -:  993:            {
        -:  994:                //+2 cards
    #####:  995:                drawCard(currentPlayer, state);
    #####:  996:                drawCard(currentPlayer, state);
        -:  997:            }
    #####:  998:            else if (choice1 == 2)
        -:  999:            {
        -: 1000:                //+2 coins
    #####: 1001:                state->coins = state->coins + 2;
        -: 1002:            }
        -: 1003:            else
        -: 1004:            {
        -: 1005:                //trash 2 cards in hand
    #####: 1006:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1007:                discardCard(choice3, currentPlayer, state, 1);
        -: 1008:            }
        -: 1009:
        -: 1010:            //discard card from hand
    #####: 1011:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1012:            return 0;
        -: 1013:
        -: 1014:        case tribute:
    #####: 1015:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1016:                if (state->deckCount[nextPlayer] > 0){
    #####: 1017:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1018:                    state->deckCount[nextPlayer]--;
        -: 1019:                }
    #####: 1020:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1021:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1022:                    state->discardCount[nextPlayer]--;
        -: 1023:                }
        -: 1024:                else{
        -: 1025:                    //No Card to Reveal
        -: 1026:                    if (DEBUG){
        -: 1027:                        printf("No cards to reveal\n");
        -: 1028:                    }
        -: 1029:                }
        -: 1030:            }
        -: 1031:
        -: 1032:            else{
    #####: 1033:                if (state->deckCount[nextPlayer] == 0){
    #####: 1034:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1035:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1036:                        state->deckCount[nextPlayer]++;
    #####: 1037:                        state->discard[nextPlayer][i] = -1;
    #####: 1038:                        state->discardCount[nextPlayer]--;
        -: 1039:                    }
        -: 1040:
    #####: 1041:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1042:                }
    #####: 1043:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:                state->deckCount[nextPlayer]--;
    #####: 1046:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
        -: 1049:            }
        -: 1050:
    #####: 1051:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####: 1052:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1053:                state->playedCardCount++;
    #####: 1054:                tributeRevealedCards[1] = -1;
        -: 1055:            }
        -: 1056:
    #####: 1057:            for (i = 0; i <= 2; i ++){
    #####: 1058:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1059:                    state->coins += 2;
        -: 1060:                }
        -: 1061:
    #####: 1062:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1063:                    drawCard(currentPlayer, state);
    #####: 1064:                    drawCard(currentPlayer, state);
        -: 1065:                }
        -: 1066:                else{//Action Card
    #####: 1067:                    state->numActions = state->numActions + 2;
        -: 1068:                }
        -: 1069:            }
        -: 1070:
    #####: 1071:            return 0;
        -: 1072:
        -: 1073:        case ambassador:
    #####: 1074:            j = 0;		//used to check if player has enough cards to discard
        -: 1075:
    #####: 1076:            if (choice2 > 2 || choice2 < 0)
        -: 1077:            {
    #####: 1078:                return -1;
        -: 1079:            }
        -: 1080:
    #####: 1081:            if (choice1 == handPos)
        -: 1082:            {
    #####: 1083:                return -1;
        -: 1084:            }
        -: 1085:
    #####: 1086:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1087:            {
    #####: 1088:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1089:                {
    #####: 1090:                    j++;
        -: 1091:                }
        -: 1092:            }
    #####: 1093:            if (j < choice2)
        -: 1094:            {
    #####: 1095:                return -1;
        -: 1096:            }
        -: 1097:
        -: 1098:            if (DEBUG)
        -: 1099:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1100:
        -: 1101:            //increase supply count for choosen card by amount being discarded
    #####: 1102:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1103:
        -: 1104:            //each other player gains a copy of revealed card
    #####: 1105:            for (i = 0; i < state->numPlayers; i++)
        -: 1106:            {
    #####: 1107:                if (i != currentPlayer)
        -: 1108:                {
    #####: 1109:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1110:                }
        -: 1111:            }
        -: 1112:
        -: 1113:            //discard played card from hand
    #####: 1114:            discardCard(handPos, currentPlayer, state, 0);
        -: 1115:
        -: 1116:            //trash copies of cards returned to supply
    #####: 1117:            for (j = 0; j < choice2; j++)
        -: 1118:            {
    #####: 1119:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:                {
    #####: 1121:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1122:                    {
    #####: 1123:                        discardCard(i, currentPlayer, state, 1);
    #####: 1124:                        break;
        -: 1125:                    }
        -: 1126:                }
        -: 1127:            }
        -: 1128:
    #####: 1129:            return 0;
        -: 1130:
        -: 1131:        case cutpurse:
        -: 1132:
    #####: 1133:            updateCoins(currentPlayer, state, 2);
    #####: 1134:            for (i = 0; i < state->numPlayers; i++)
        -: 1135:            {
    #####: 1136:                if (i != currentPlayer)
        -: 1137:                {
    #####: 1138:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1139:                    {
    #####: 1140:                        if (state->hand[i][j] == copper)
        -: 1141:                        {
    #####: 1142:                            discardCard(j, i, state, 0);
    #####: 1143:                            break;
        -: 1144:                        }
    #####: 1145:                        if (j == state->handCount[i])
        -: 1146:                        {
    #####: 1147:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1148:                            {
        -: 1149:                                if (DEBUG)
        -: 1150:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1151:                            }
    #####: 1152:                            break;
        -: 1153:                        }
        -: 1154:                    }
        -: 1155:
        -: 1156:                }
        -: 1157:
        -: 1158:            }
        -: 1159:
        -: 1160:            //discard played card from hand
    #####: 1161:            discardCard(handPos, currentPlayer, state, 0);
        -: 1162:
    #####: 1163:            return 0;
        -: 1164:
        -: 1165:
        -: 1166:        case embargo:
        -: 1167:        {
        -: 1168:            //+2 Coins
    #####: 1169:            state->coins = state->coins + 2;
        -: 1170:
        -: 1171:            //see if selected pile is in play
    #####: 1172:            if ( state->supplyCount[choice1] == -1 )
        -: 1173:            {
    #####: 1174:                return -1;
        -: 1175:            }
        -: 1176:
        -: 1177:            //add embargo token to selected supply pile
    #####: 1178:            state->embargoTokens[choice1]++;
        -: 1179:
        -: 1180:            //trash card
    #####: 1181:            discardCard(handPos, currentPlayer, state, 1);
    #####: 1182:            return 0;
        -: 1183:        }
        -: 1184:
        -: 1185:
        -: 1186:        case outpost:
        -: 1187:            //set outpost flag
    #####: 1188:            state->outpostPlayed++;
        -: 1189:
        -: 1190:            //discard card
    #####: 1191:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1192:            return 0;
        -: 1193:
        -: 1194:        case salvager:
        -: 1195:            //+1 buy
    #####: 1196:            state->numBuys++;
        -: 1197:
    #####: 1198:            if (choice1)
        -: 1199:            {
        -: 1200:                //gain coins equal to trashed card
    #####: 1201:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1202:                //trash card
    #####: 1203:                discardCard(choice1, currentPlayer, state, 1);
        -: 1204:            }
        -: 1205:
        -: 1206:            //discard card
    #####: 1207:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1208:            return 0;
        -: 1209:
        -: 1210:        case sea_hag:
    #####: 1211:            for (i = 0; i < state->numPlayers; i++){
    #####: 1212:                if (i != currentPlayer){
    #####: 1213:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1214:                    state->discardCount[i]++;
    #####: 1215:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1216:                }
        -: 1217:            }
    #####: 1218:            return 0;
        -: 1219:
        -: 1220:        case treasure_map:
        -: 1221:            //search hand for another treasure_map
    #####: 1222:            index = -1;
    #####: 1223:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1224:            {
    #####: 1225:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1226:                {
    #####: 1227:                    index = i;
    #####: 1228:                    break;
        -: 1229:                }
        -: 1230:            }
    #####: 1231:            if (index > -1)
        -: 1232:            {
        -: 1233:                //trash both treasure cards
    #####: 1234:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1235:                discardCard(index, currentPlayer, state, 1);
        -: 1236:
        -: 1237:                //gain 4 Gold cards
    #####: 1238:                for (i = 0; i < 4; i++)
        -: 1239:                {
    #####: 1240:                    gainCard(gold, state, 1, currentPlayer);
        -: 1241:                }
        -: 1242:
        -: 1243:                //return success
    #####: 1244:                return 1;
        -: 1245:            }
        -: 1246:
        -: 1247:            //no second treasure_map found in hand
    #####: 1248:            return -1;
        -: 1249:    }
        -: 1250:
    #####: 1251:    return -1;
        -: 1252:}
        -: 1253:
        8: 1254:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1255:{
        -: 1256:
        -: 1257:    //if card is not trashed, added to Played pile
        8: 1258:    if (trashFlag < 1)
        -: 1259:    {
        -: 1260:        //add card to played pile
        8: 1261:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        8: 1262:        state->playedCardCount++;
        -: 1263:    }
        -: 1264:
        -: 1265:    //set played card to -1
        8: 1266:    state->hand[currentPlayer][handPos] = -1;
        -: 1267:
        -: 1268:    //remove card from player's hand
        8: 1269:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1270:    {
        -: 1271:        //reduce number of cards in hand
    #####: 1272:        state->handCount[currentPlayer]--;
        -: 1273:    }
        8: 1274:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1275:    {
        -: 1276:        //reduce number of cards in hand
    #####: 1277:        state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:    else
        -: 1280:    {
        -: 1281:        //replace discarded card with last card in hand
        8: 1282:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1283:        //set last card to -1
        8: 1284:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1285:        //reduce number of cards in hand
        8: 1286:        state->handCount[currentPlayer]--;
        -: 1287:    }
        -: 1288:
        8: 1289:    return 0;
        -: 1290:}
        -: 1291:
        6: 1292:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1293:{
        -: 1294:    //Note: supplyPos is enum of choosen card
        -: 1295:
        -: 1296:    //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1297:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1298:    {
    #####: 1299:        return -1;
        -: 1300:    }
        -: 1301:
        -: 1302:    //added card for [whoseTurn] current player:
        -: 1303:    // toFlag = 0 : add to discard
        -: 1304:    // toFlag = 1 : add to deck
        -: 1305:    // toFlag = 2 : add to hand
        -: 1306:
        6: 1307:    if (toFlag == 1)
        -: 1308:    {
    #####: 1309:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1310:        state->deckCount[player]++;
        -: 1311:    }
        6: 1312:    else if (toFlag == 2)
        -: 1313:    {
    #####: 1314:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1315:        state->handCount[player]++;
        -: 1316:    }
        -: 1317:    else
        -: 1318:    {
        6: 1319:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1320:        state->discardCount[player]++;
        -: 1321:    }
        -: 1322:
        -: 1323:    //decrease number in supply pile
        6: 1324:    state->supplyCount[supplyPos]--;
        -: 1325:
        6: 1326:    return 0;
        -: 1327:}
        -: 1328:
       10: 1329:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1330:{
        -: 1331:    int i;
        -: 1332:
        -: 1333:    //reset coin count
       10: 1334:    state->coins = 0;
        -: 1335:
        -: 1336:    //add coins for each Treasure card in player's hand
       76: 1337:    for (i = 0; i < state->handCount[player]; i++)
        -: 1338:    {
       66: 1339:        if (state->hand[player][i] == copper)
        -: 1340:        {
       24: 1341:            state->coins += 1;
        -: 1342:        }
       42: 1343:        else if (state->hand[player][i] == silver)
        -: 1344:        {
    #####: 1345:            state->coins += 2;
        -: 1346:        }
       42: 1347:        else if (state->hand[player][i] == gold)
        -: 1348:        {
    #####: 1349:            state->coins += 3;
        -: 1350:        }
        -: 1351:    }
        -: 1352:
        -: 1353:    //add bonus
       10: 1354:    state->coins += bonus;
        -: 1355:
       10: 1356:    return 0;
        -: 1357:}
        -: 1358:
        -: 1359:
        -: 1360://end of dominion.c

